{ 
    "name" : "bap.yaml" 
    "stream" : "b3BlbmFwaTogMy4xLjAKaW5mbzoKICB0aXRsZTogQmVja24gUHJvdG9jb2wgQ29yZQogIGRlc2NyaXB0aW9uOiBCZWNrbiBDb3JlIFRyYW5zYWN0aW9uIEFQSSBzcGVjaWZpY2F0aW9uCiAgdmVyc2lvbjogMS4xLjEKc2VjdXJpdHk6CiAgLSBTdWJzY3JpYmVyQXV0aDogW10KcGF0aHM6CiAgL29uX3NlYXJjaDoKICAgIHBvc3Q6CiAgICAgIHRhZ3M6CiAgICAgICAgLSBCZWNrbiBBcHBsaWNhdGlvbiBQbGF0Zm9ybSAoQkFQKQogICAgICAgIC0gQmVja24gR2F0ZXdheSAoQkcpCiAgICAgIGRlc2NyaXB0aW9uOiBCUFAgc2VuZHMgaXRzIGNhdGFsb2cgaW4gcmVzcG9uc2UgdG8gYSBzZWFyY2ggcmVxdWVzdC4KICAgICAgcmVxdWVzdEJvZHk6CiAgICAgICAgY29udGVudDoKICAgICAgICAgIGFwcGxpY2F0aW9uL2pzb246CiAgICAgICAgICAgIHNjaGVtYToKICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgY29udGV4dDoKICAgICAgICAgICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvQ29udGV4dCcKICAgICAgICAgICAgICAgICAgICAtIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICBlbnVtOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBvbl9zZWFyY2gKICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOgogICAgICAgICAgICAgICAgICAgICAgICAtIGFjdGlvbgogICAgICAgICAgICAgICAgbWVzc2FnZToKICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgY2F0YWxvZzoKICAgICAgICAgICAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9DYXRhbG9nJwogICAgICAgICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgICAgICAgICAtIGNhdGFsb2cKICAgICAgICAgICAgICAgIGVycm9yOgogICAgICAgICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvRXJyb3InCiAgICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgICAgICAtIGNvbnRleHQKICAgICAgcmVzcG9uc2VzOgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAkcmVmOiAnIy9wYXRocy9+MWluaXQvcG9zdC9yZXNwb25zZXMvZGVmYXVsdCcKICAvb25fc2VsZWN0OgogICAgcG9zdDoKICAgICAgdGFnczoKICAgICAgICAtIEJlY2tuIEFwcGxpY2F0aW9uIFBsYXRmb3JtIChCQVApCiAgICAgIGRlc2NyaXB0aW9uOiBTZW5kIGRyYWZ0IG9yZGVyIG9iamVjdCB3aXRoIHF1b3RlZCBwcmljZSBmb3Igc2VsZWN0ZWQgaXRlbXMKICAgICAgcmVxdWVzdEJvZHk6CiAgICAgICAgY29udGVudDoKICAgICAgICAgIGFwcGxpY2F0aW9uL2pzb246CiAgICAgICAgICAgIHNjaGVtYToKICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgY29udGV4dDoKICAgICAgICAgICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvQ29udGV4dCcKICAgICAgICAgICAgICAgICAgICAtIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICBlbnVtOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBvbl9zZWxlY3QKICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOgogICAgICAgICAgICAgICAgICAgICAgICAtIGFjdGlvbgogICAgICAgICAgICAgICAgbWVzc2FnZToKICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgb3JkZXI6CiAgICAgICAgICAgICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvT3JkZXInCiAgICAgICAgICAgICAgICBlcnJvcjoKICAgICAgICAgICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0Vycm9yJwogICAgICAgICAgICAgIHJlcXVpcmVkOgogICAgICAgICAgICAgICAgLSBjb250ZXh0CiAgICAgIHJlc3BvbnNlczoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgJHJlZjogJyMvcGF0aHMvfjFpbml0L3Bvc3QvcmVzcG9uc2VzL2RlZmF1bHQnCiAgL29uX2luaXQ6CiAgICBwb3N0OgogICAgICB0YWdzOgogICAgICAgIC0gQmVja24gQXBwbGljYXRpb24gUGxhdGZvcm0gKEJBUCkKICAgICAgZGVzY3JpcHRpb246IFNlbmQgb3JkZXIgb2JqZWN0IHdpdGggcGF5bWVudCBkZXRhaWxzIHVwZGF0ZWQKICAgICAgcmVxdWVzdEJvZHk6CiAgICAgICAgY29udGVudDoKICAgICAgICAgIGFwcGxpY2F0aW9uL2pzb246CiAgICAgICAgICAgIHNjaGVtYToKICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgY29udGV4dDoKICAgICAgICAgICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvQ29udGV4dCcKICAgICAgICAgICAgICAgICAgICAtIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICBlbnVtOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBvbl9pbml0CiAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgICAgICAgICAgICAgLSBhY3Rpb24KICAgICAgICAgICAgICAgIG1lc3NhZ2U6CiAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgIG9yZGVyOgogICAgICAgICAgICAgICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL09yZGVyJwogICAgICAgICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgICAgICAgICAtIG9yZGVyCiAgICAgICAgICAgICAgICBlcnJvcjoKICAgICAgICAgICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0Vycm9yJwogICAgICAgICAgICAgIHJlcXVpcmVkOgogICAgICAgICAgICAgICAgLSBjb250ZXh0CiAgICAgIHJlc3BvbnNlczoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgJHJlZjogJyMvcGF0aHMvfjFpbml0L3Bvc3QvcmVzcG9uc2VzL2RlZmF1bHQnCiAgL29uX2NvbmZpcm06CiAgICBwb3N0OgogICAgICB0YWdzOgogICAgICAgIC0gQmVja24gQXBwbGljYXRpb24gUGxhdGZvcm0gKEJBUCkKICAgICAgZGVzY3JpcHRpb246IFNlbmQgYWN0aXZlIG9yZGVyIG9iamVjdAogICAgICByZXF1ZXN0Qm9keToKICAgICAgICBjb250ZW50OgogICAgICAgICAgYXBwbGljYXRpb24vanNvbjoKICAgICAgICAgICAgc2NoZW1hOgogICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICBjb250ZXh0OgogICAgICAgICAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9Db250ZXh0JwogICAgICAgICAgICAgICAgICAgIC0gcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgIGVudW06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIG9uX2NvbmZpcm0KICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOgogICAgICAgICAgICAgICAgICAgICAgICAtIGFjdGlvbgogICAgICAgICAgICAgICAgbWVzc2FnZToKICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgb3JkZXI6CiAgICAgICAgICAgICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvT3JkZXInCiAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOgogICAgICAgICAgICAgICAgICAgIC0gb3JkZXIKICAgICAgICAgICAgICAgIGVycm9yOgogICAgICAgICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvRXJyb3InCiAgICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgICAgICAtIGNvbnRleHQKICAgICAgcmVzcG9uc2VzOgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAkcmVmOiAnIy9wYXRocy9+MWluaXQvcG9zdC9yZXNwb25zZXMvZGVmYXVsdCcKICAvb25fdHJhY2s6CiAgICBwb3N0OgogICAgICB0YWdzOgogICAgICAgIC0gQmVja24gQXBwbGljYXRpb24gUGxhdGZvcm0gKEJBUCkKICAgICAgZGVzY3JpcHRpb246IFNlbmQgdHJhY2tpbmcgZGV0YWlscyBvZiBhbiBhY3RpdmUgb3JkZXIKICAgICAgcmVxdWVzdEJvZHk6CiAgICAgICAgY29udGVudDoKICAgICAgICAgIGFwcGxpY2F0aW9uL2pzb246CiAgICAgICAgICAgIHNjaGVtYToKICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgY29udGV4dDoKICAgICAgICAgICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvQ29udGV4dCcKICAgICAgICAgICAgICAgICAgICAtIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICBlbnVtOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBvbl90cmFjawogICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgICAgICAgICAgICAgIC0gYWN0aW9uCiAgICAgICAgICAgICAgICBtZXNzYWdlOgogICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICB0cmFja2luZzoKICAgICAgICAgICAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9UcmFja2luZycKICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgICAgICAgICAgLSB0cmFja2luZwogICAgICAgICAgICAgICAgZXJyb3I6CiAgICAgICAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9FcnJvcicKICAgICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgICAgIC0gY29udGV4dAogICAgICByZXNwb25zZXM6CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICRyZWY6ICcjL3BhdGhzL34xaW5pdC9wb3N0L3Jlc3BvbnNlcy9kZWZhdWx0JwogIC9vbl9jYW5jZWw6CiAgICBwb3N0OgogICAgICB0YWdzOgogICAgICAgIC0gQmVja24gQXBwbGljYXRpb24gUGxhdGZvcm0gKEJBUCkKICAgICAgZGVzY3JpcHRpb246IFNlbmQgY2FuY2VsbGF0aW9uIHJlcXVlc3RfaWQgd2l0aCByZWFzb25zIGxpc3QgaW4gY2FzZSBvZiBjYW5jZWxsYXRpb24gcmVxdWVzdC4gRWxzZSBzZW5kIGNhbmNlbGxlZCBvcmRlciBvYmplY3QKICAgICAgcmVxdWVzdEJvZHk6CiAgICAgICAgY29udGVudDoKICAgICAgICAgIGFwcGxpY2F0aW9uL2pzb246CiAgICAgICAgICAgIHNjaGVtYToKICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgY29udGV4dDoKICAgICAgICAgICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvQ29udGV4dCcKICAgICAgICAgICAgICAgICAgICAtIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICBlbnVtOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBvbl9jYW5jZWwKICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOgogICAgICAgICAgICAgICAgICAgICAgICAtIGFjdGlvbgogICAgICAgICAgICAgICAgbWVzc2FnZToKICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgb3JkZXI6CiAgICAgICAgICAgICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvT3JkZXInCiAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOgogICAgICAgICAgICAgICAgICAgIC0gb3JkZXIKICAgICAgICAgICAgICAgIGVycm9yOgogICAgICAgICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvRXJyb3InCiAgICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgICAgICAtIGNvbnRleHQKICAgICAgcmVzcG9uc2VzOgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAkcmVmOiAnIy9wYXRocy9+MWluaXQvcG9zdC9yZXNwb25zZXMvZGVmYXVsdCcKICAvb25fdXBkYXRlOgogICAgcG9zdDoKICAgICAgdGFnczoKICAgICAgICAtIEJlY2tuIEFwcGxpY2F0aW9uIFBsYXRmb3JtIChCQVApCiAgICAgIGRlc2NyaXB0aW9uOiBSZXR1cm5zIHVwZGF0ZWQgc2VydmljZSB3aXRoIHVwZGF0ZWQgcnVudGltZSBvYmplY3QKICAgICAgcmVxdWVzdEJvZHk6CiAgICAgICAgY29udGVudDoKICAgICAgICAgIGFwcGxpY2F0aW9uL2pzb246CiAgICAgICAgICAgIHNjaGVtYToKICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgY29udGV4dDoKICAgICAgICAgICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvQ29udGV4dCcKICAgICAgICAgICAgICAgICAgICAtIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICBlbnVtOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBvbl91cGRhdGUKICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOgogICAgICAgICAgICAgICAgICAgICAgICAtIGFjdGlvbgogICAgICAgICAgICAgICAgbWVzc2FnZToKICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgb3JkZXI6CiAgICAgICAgICAgICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvT3JkZXInCiAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOgogICAgICAgICAgICAgICAgICAgIC0gb3JkZXIKICAgICAgICAgICAgICAgIGVycm9yOgogICAgICAgICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvRXJyb3InCiAgICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgICAgICAtIGNvbnRleHQKICAgICAgcmVzcG9uc2VzOgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAkcmVmOiAnIy9wYXRocy9+MWluaXQvcG9zdC9yZXNwb25zZXMvZGVmYXVsdCcKICAvb25fc3RhdHVzOgogICAgcG9zdDoKICAgICAgdGFnczoKICAgICAgICAtIEJlY2tuIEFwcGxpY2F0aW9uIFBsYXRmb3JtIChCQVApCiAgICAgIGRlc2NyaXB0aW9uOiBGZXRjaCB0aGUgc3RhdHVzIG9mIGEgU2VydmljZQogICAgICByZXF1ZXN0Qm9keToKICAgICAgICBjb250ZW50OgogICAgICAgICAgYXBwbGljYXRpb24vanNvbjoKICAgICAgICAgICAgc2NoZW1hOgogICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICBjb250ZXh0OgogICAgICAgICAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9Db250ZXh0JwogICAgICAgICAgICAgICAgICAgIC0gcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgIGVudW06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIG9uX3N0YXR1cwogICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgICAgICAgICAgICAgIC0gYWN0aW9uCiAgICAgICAgICAgICAgICBtZXNzYWdlOgogICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICBvcmRlcjoKICAgICAgICAgICAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9PcmRlcicKICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgICAgICAgICAgLSBvcmRlcgogICAgICAgICAgICAgICAgZXJyb3I6CiAgICAgICAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9FcnJvcicKICAgICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgICAgIC0gY29udGV4dAogICAgICByZXNwb25zZXM6CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICRyZWY6ICcjL3BhdGhzL34xaW5pdC9wb3N0L3Jlc3BvbnNlcy9kZWZhdWx0JwogIC9vbl9yYXRpbmc6CiAgICBwb3N0OgogICAgICB0YWdzOgogICAgICAgIC0gQmVja24gQXBwbGljYXRpb24gUGxhdGZvcm0gKEJBUCkKICAgICAgZGVzY3JpcHRpb246IFByb3ZpZGUgZmVlZGJhY2sgb24gYSBzZXJ2aWNlCiAgICAgIHJlcXVlc3RCb2R5OgogICAgICAgIGNvbnRlbnQ6CiAgICAgICAgICBhcHBsaWNhdGlvbi9qc29uOgogICAgICAgICAgICBzY2hlbWE6CiAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgIGNvbnRleHQ6CiAgICAgICAgICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAgICAgICAgIC0gJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0NvbnRleHQnCiAgICAgICAgICAgICAgICAgICAgLSBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246CiAgICAgICAgICAgICAgICAgICAgICAgICAgZW51bToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gb25fcmF0aW5nCiAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgICAgICAgICAgICAgLSBhY3Rpb24KICAgICAgICAgICAgICAgIG1lc3NhZ2U6CiAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgIGZlZWRiYWNrX2Zvcm06CiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogQSBmZWVkYmFjayBmb3JtIHRvIGFsbG93IHRoZSB1c2VyIHRvIHByb3ZpZGUgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBvbiB0aGUgcmF0aW5nIHByb3ZpZGVkCiAgICAgICAgICAgICAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvWElucHV0JwogICAgICAgICAgICAgICAgZXJyb3I6CiAgICAgICAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9FcnJvcicKICAgICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgICAgIC0gY29udGV4dAogICAgICAgICAgICAgICAgLSBtZXNzYWdlCiAgICAgIHJlc3BvbnNlczoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgJHJlZjogJyMvcGF0aHMvfjFpbml0L3Bvc3QvcmVzcG9uc2VzL2RlZmF1bHQnCiAgL29uX3N1cHBvcnQ6CiAgICBwb3N0OgogICAgICB0YWdzOgogICAgICAgIC0gQmVja24gQXBwbGljYXRpb24gUGxhdGZvcm0gKEJBUCkKICAgICAgZGVzY3JpcHRpb246IENvbnRhY3QgU3VwcG9ydAogICAgICByZXF1ZXN0Qm9keToKICAgICAgICBjb250ZW50OgogICAgICAgICAgYXBwbGljYXRpb24vanNvbjoKICAgICAgICAgICAgc2NoZW1hOgogICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICBjb250ZXh0OgogICAgICAgICAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9Db250ZXh0JwogICAgICAgICAgICAgICAgICAgIC0gcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgIGVudW06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIG9uX3N1cHBvcnQKICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOgogICAgICAgICAgICAgICAgICAgICAgICAtIGFjdGlvbgogICAgICAgICAgICAgICAgbWVzc2FnZToKICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgc3VwcG9ydDoKICAgICAgICAgICAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9TdXBwb3J0JwogICAgICAgICAgICAgICAgZXJyb3I6CiAgICAgICAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9FcnJvcicKICAgICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgICAgIC0gY29udGV4dAogICAgICByZXNwb25zZXM6CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICRyZWY6ICcjL3BhdGhzL34xaW5pdC9wb3N0L3Jlc3BvbnNlcy9kZWZhdWx0Jwpjb21wb25lbnRzOgogIHNlY3VyaXR5U2NoZW1lczoKICAgIFN1YnNjcmliZXJBdXRoOgogICAgICB0eXBlOiBhcGlLZXkKICAgICAgaW46IGhlYWRlcgogICAgICBuYW1lOiBBdXRob3JpemF0aW9uCiAgICAgIGRlc2NyaXB0aW9uOiAnU2lnbmF0dXJlIG9mIG1lc3NhZ2UgYm9keSB1c2luZyBCQVAgb3IgQlBQIHN1YnNjcmliZXInJ3Mgc2lnbmluZyBwdWJsaWMga2V5LiA8YnIvPjxici8+Rm9ybWF0Ojxici8+PGJyLz48Y29kZT5BdXRob3JpemF0aW9uIDogU2lnbmF0dXJlIGtleUlkPSJ7c3Vic2NyaWJlcl9pZH18e3VuaXF1ZV9rZXlfaWR9fHthbGdvcml0aG19IixhbGdvcml0aG09ImVkMjU1MTkiLGNyZWF0ZWQ9IjE2MDY5NzA2MjkiLGV4cGlyZXM9IjE2MDcwMzA2MjkiLGhlYWRlcnM9IihjcmVhdGVkKSAoZXhwaXJlcykgZGlnZXN0IixzaWduYXR1cmU9IkJhc2U2NChzaWduaW5nIHN0cmluZykiPC9jb2RlPicKICBzY2hlbWFzOgogICAgQWNrOgogICAgICBkZXNjcmlwdGlvbjogJ0Rlc2NyaWJlcyB0aGUgYWNrbm93bGVkZ2VtZW50IHNlbnQgaW4gcmVzcG9uc2UgdG8gYW4gQVBJIGNhbGwuIElmIHRoZSBpbXBsZW1lbnRhdGlvbiB1c2VzIEhUVFAvUywgdGhlbiBBY2sgbXVzdCBiZSByZXR1cm5lZCBpbiB0aGUgc2FtZSBzZXNzaW9uLiBFdmVyeSBBUEkgY2FsbCB0byBhIEJQUCBtdXN0IGJlIHJlc3BvbmRlZCB0byB3aXRoIGFuIEFjayB3aGV0aGVyIHRoZSBCUFAgaW50ZW5kcyB0byByZXNwb25kIHdpdGggYSBjYWxsYmFjayBvciBub3QuIFRoaXMgaGFzIG9uZSBwcm9wZXJ0eSBjYWxsZWQgYHN0YXR1c2AgdGhhdCBpbmRpY2F0ZXMgdGhlIHN0YXR1cyBvZiB0aGUgQWNrbm93bGVkZ2VtZW50LicKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgc3RhdHVzOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBkZXNjcmlwdGlvbjogJ1RoZSBzdGF0dXMgb2YgdGhlIGFja25vd2xlZGdlbWVudC4gSWYgdGhlIHJlcXVlc3QgcGFzc2VzIHRoZSB2YWxpZGF0aW9uIGNyaXRlcmlhIG9mIHRoZSBCUFAsIHRoZW4gdGhpcyBpcyBzZXQgdG8gQUNLLiBJZiBhIEJQUCByZXNwb25kcyB3aXRoIHN0YXR1cyA9IGBBQ0tgIHRvIGEgcmVxdWVzdCwgaXQgaXMgcmVxdWlyZWQgdG8gcmVzcG9uZCB3aXRoIGEgY2FsbGJhY2suIElmIHRoZSByZXF1ZXN0IGZhaWxzIHRoZSB2YWxpZGF0aW9uIGNyaXRlcmlhLCB0aGVuIHRoaXMgaXMgc2V0IHRvIE5BQ0suIEFkZGl0aW9uYWxseSwgaWYgYSBCUFAgZG9lcyBub3QgaW50ZW5kIHRvIHJlc3BvbmQgd2l0aCBhIGNhbGxiYWNrIGV2ZW4gYWZ0ZXIgdGhlIHJlcXVlc3QgbWVldHMgdGhlIHZhbGlkYXRpb24gY3JpdGVyaWEsIGl0IHNob3VsZCBzZXQgdGhpcyB2YWx1ZSB0byBgTkFDS2AuJwogICAgICAgICAgZW51bToKICAgICAgICAgICAgLSBBQ0sKICAgICAgICAgICAgLSBOQUNLCiAgICAgICAgdGFnczoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBBIGxpc3Qgb2YgdGFncyBjb250YWluaW5nIGFueSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHNlbnQgYWxvbmcgd2l0aCB0aGUgQWNrbm93bGVkZ2VtZW50LgogICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvVGFnR3JvdXAnCiAgICBBZGRPbjoKICAgICAgZGVzY3JpcHRpb246IERlc2NyaWJlcyBhbiBhZGRpdGlvbmFsIGl0ZW0gb2ZmZXJlZCBhcyBhIHZhbHVlLWFkZGl0aW9uIHRvIGEgcHJvZHVjdCBvciBzZXJ2aWNlLiBUaGlzIGRvZXMgbm90IGV4aXN0IGluZGVwZW5kZW50bHkgaW4gYSBjYXRhbG9nIGFuZCBpcyBhbHdheXMgYXNzb2NpYXRlZCB3aXRoIGFuIGl0ZW0uCiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIGlkOgogICAgICAgICAgZGVzY3JpcHRpb246IFByb3ZpZGVyLWRlZmluZWQgSUQgb2YgdGhlIGFkZC1vbgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgZGVzY3JpcHRvcjoKICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9EZXNjcmlwdG9yJwogICAgICAgIHByaWNlOgogICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1ByaWNlJwogICAgQWRkcmVzczoKICAgICAgZGVzY3JpcHRpb246IERlc2NyaWJlcyBhIHBvc3RhbCBhZGRyZXNzLgogICAgICB0eXBlOiBzdHJpbmcKICAgIEFnZW50OgogICAgICBkZXNjcmlwdGlvbjogJ0Rlc2NyaWJlcyB0aGUgZGlyZWN0IHBlcmZvcm1lciwgZHJpdmVyIG9yIGV4ZWN1dG9yIHRoYXQgZnVsZmlsbHMgYW4gb3JkZXIuIEl0IGlzIHVzdWFsbHkgYSBwZXJzb24uIEJ1dCBpbiBzb21lIHJhcmUgY2FzZXMsIGl0IGNvdWxkIGJlIGEgbm9uLWxpdmluZyBlbnRpdHkgbGlrZSBhIGRyb25lLCBvciBhIGJvdC4gU29tZSBleGFtcGxlcyBvZiBhZ2VudHMgYXJlIERvY3RvciBpbiB0aGUgaGVhbHRoY2FyZSBzZWN0b3IsIGEgZHJpdmVyIGluIHRoZSBtb2JpbGl0eSBzZWN0b3IsIG9yIGEgZGVsaXZlcnkgcGVyc29uIGluIHRoZSBsb2dpc3RpY3Mgc2VjdG9yLiBUaGlzIG9iamVjdCBjYW4gYmUgc2V0IGF0IGFueSBzdGFnZSBvZiB0aGUgb3JkZXIgbGlmZWN5Y2xlLiBUaGlzIGNhbiBiZSBzZXQgYXQgdGhlIGRpc2NvdmVyeSBzdGFnZSB3aGVuIHRoZSBCUFAgd2FudHMgdG8gcHJvdmlkZSBkZXRhaWxzIG9uIHRoZSBhZ2VudCBmdWxmaWxsaW5nIHRoZSBvcmRlciwgbGlrZSBpbiBoZWFsdGhjYXJlLCB3aGVyZSB0aGUgZG9jdG9yJydzIG5hbWUgYXBwZWFycyBkdXJpbmcgc2VhcmNoLiBUaGlzIG9iamVjdCBjYW4gYWxzbyB1c2VkIHRvIHNlYXJjaCBmb3IgYSBwYXJ0aWN1bGFyIHBlcnNvbiB0aGF0IHRoZSBjdXN0b21lciB3YW50cyBmdWxmaWxsaW5nIGFuIG9yZGVyLiBTb21ldGltZXMsIHRoaXMgb2JqZWN0IGdldHMgaW5zdGFudGlhdGVkIGFmdGVyIHRoZSBvcmRlciBpcyBjb25maXJtZWQsIGxpa2UgaW4gdGhlIGNhc2Ugb2Ygb24tZGVtYW5kIHRheGlzLCB3aGVyZSB0aGUgZHJpdmVyIGlzIGFzc2lnbmVkIGFmdGVyIHRoZSB1c2VyIGNvbmZpcm1zIHRoZSByaWRlLicKICAgICAgcHJvcGVydGllczoKICAgICAgICBwZXJzb246CiAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvUGVyc29uJwogICAgICAgIGNvbnRhY3Q6CiAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvQ29udGFjdCcKICAgICAgICBvcmdhbml6YXRpb246CiAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvT3JnYW5pemF0aW9uJwogICAgICAgIHJhdGluZzoKICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9SYXRpbmcvcHJvcGVydGllcy92YWx1ZScKICAgIEF1dGhvcml6YXRpb246CiAgICAgIGRlc2NyaXB0aW9uOiAnRGVzY3JpYmVzIGFuIGF1dGhvcml6YXRpb24gbWVjaGFuaXNtIHVzZWQgdG8gc3RhcnQgb3IgZW5kIHRoZSBmdWxmaWxsbWVudCBvZiBhbiBvcmRlci4gRm9yIGV4YW1wbGUsIGluIHRoZSBtb2JpbGl0eSBzZWN0b3IsIHRoZSBkcml2ZXIgbWF5IHJlcXVpcmUgYSBvbmUtdGltZSBwYXNzd29yZCB0byBpbml0aWF0ZSB0aGUgcmlkZS4gSW4gdGhlIGhlYWx0aGNhcmUgc2VjdG9yLCBhIHBhdGllbnQgbWF5IG5lZWQgdG8gcHJvdmlkZSBhIHBhc3N3b3JkIHRvIG9wZW4gYSB2aWRlbyBjb25mZXJlbmNlIGxpbmsgZHVyaW5nIGEgdGVsZWNvbnN1bHRhdGlvbi4nCiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIHR5cGU6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVHlwZSBvZiBhdXRob3JpemF0aW9uIG1lY2hhbmlzbSB1c2VkLiBUaGUgYWxsb3dlZCB2YWx1ZXMgZm9yIHRoaXMgZmllbGQgY2FuIGJlIHB1Ymxpc2hlZCBhcyBwYXJ0IG9mIHRoZSBuZXR3b3JrIHBvbGljeS4KICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIHRva2VuOgogICAgICAgICAgZGVzY3JpcHRpb246ICdUb2tlbiB1c2VkIGZvciBhdXRob3JpemF0aW9uLiBUaGlzIGlzIHR5cGljYWxseSBnZW5lcmF0ZWQgYXQgdGhlIEJQUC4gVGhlIEJBUCBjYW4gc2VuZCB0aGlzIHZhbHVlIHRvIHRoZSB1c2VyIHZpYSBhbnkgY2hhbm5lbCB0aGF0IGl0IHVzZXMgdG8gYXV0aGVudGljYXRlIHRoZSB1c2VyIGxpa2UgU01TLCBFbWFpbCwgUHVzaCBub3RpZmljYXRpb24sIG9yIGluLWFwcCByZW5kZXJpbmcuJwogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgdmFsaWRfZnJvbToKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaW1lc3RhbXAgaW4gUkZDMzMzOSBmb3JtYXQgZnJvbSB3aGljaCB0b2tlbiBpcyB2YWxpZAogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBmb3JtYXQ6IGRhdGUtdGltZQogICAgICAgIHZhbGlkX3RvOgogICAgICAgICAgZGVzY3JpcHRpb246IFRpbWVzdGFtcCBpbiBSRkMzMzM5IGZvcm1hdCB1bnRpbCB3aGljaCB0b2tlbiBpcyB2YWxpZAogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBmb3JtYXQ6IGRhdGUtdGltZQogICAgICAgIHN0YXR1czoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBTdGF0dXMgb2YgdGhlIHRva2VuCiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgIEJpbGxpbmc6CiAgICAgIGRlc2NyaXB0aW9uOiAnRGVzY3JpYmVzIHRoZSBiaWxsaW5nIGRldGFpbHMgb2YgYW4gZW50aXR5Ljxicj5UaGlzIGhhcyBwcm9wZXJ0aWVzIGxpa2UgbmFtZSxvcmdhbml6YXRpb24sYWRkcmVzcyxlbWFpbCxwaG9uZSx0aW1lLHRheF9udW1iZXIsIGNyZWF0ZWRfYXQsdXBkYXRlZF9hdCcKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgbmFtZToKICAgICAgICAgIGRlc2NyaXB0aW9uOiBOYW1lIG9mIHRoZSBiaWxsYWJsZSBlbnRpdHkKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIG9yZ2FuaXphdGlvbjoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBEZXRhaWxzIG9mIHRoZSBvcmdhbml6YXRpb24gYmVpbmcgYmlsbGVkLgogICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgIC0gJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL09yZ2FuaXphdGlvbicKICAgICAgICBhZGRyZXNzOgogICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBhZGRyZXNzIG9mIHRoZSBiaWxsYWJsZSBlbnRpdHkKICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9BZGRyZXNzJwogICAgICAgIHN0YXRlOgogICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBzdGF0ZSB3aGVyZSB0aGUgYmlsbGFibGUgZW50aXR5IHJlc2lkZXMuIFRoaXMgaXMgaW1wb3J0YW50IGZvciBzdGF0ZS1sZXZlbCB0YXggY2FsY3VsYXRpb24KICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9TdGF0ZScKICAgICAgICBjaXR5OgogICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBjaXR5IHdoZXJlIHRoZSBiaWxsYWJsZSBlbnRpdHkgcmVzaWRlcy4KICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9DaXR5JwogICAgICAgIGVtYWlsOgogICAgICAgICAgZGVzY3JpcHRpb246IEVtYWlsIGFkZHJlc3Mgd2hlcmUgdGhlIGJpbGwgaXMgc2VudCB0bwogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBmb3JtYXQ6IGVtYWlsCiAgICAgICAgcGhvbmU6CiAgICAgICAgICBkZXNjcmlwdGlvbjogUGhvbmUgbnVtYmVyIG9mIHRoZSBiaWxsYWJsZSBlbnRpdHkKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIHRpbWU6CiAgICAgICAgICBkZXNjcmlwdGlvbjogRGV0YWlscyByZWdhcmRpbmcgdGhlIGJpbGxpbmcgcGVyaW9kCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvVGltZScKICAgICAgICB0YXhfaWQ6CiAgICAgICAgICBkZXNjcmlwdGlvbjogSUQgb2YgdGhlIGJpbGxhYmxlIGVudGl0eSBhcyByZWNvZ25pemVkIGJ5IHRoZSB0YXhhdGlvbiBhdXRob3JpdHkKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgQ2FuY2VsbGF0aW9uOgogICAgICBkZXNjcmlwdGlvbjogRGVzY3JpYmVzIGEgY2FuY2VsbGF0aW9uIGV2ZW50CiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIHRpbWU6CiAgICAgICAgICBkZXNjcmlwdGlvbjogRGF0ZS10aW1lIHdoZW4gdGhlIG9yZGVyIHdhcyBjYW5jZWxsZWQgYnkgdGhlIGJ1eWVyCiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGZvcm1hdDogZGF0ZS10aW1lCiAgICAgICAgY2FuY2VsbGVkX2J5OgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBlbnVtOgogICAgICAgICAgICAtIENPTlNVTUVSCiAgICAgICAgICAgIC0gUFJPVklERVIKICAgICAgICByZWFzb246CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIHJlYXNvbiBmb3IgY2FuY2VsbGF0aW9uCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvT3B0aW9uJwogICAgICAgIGFkZGl0aW9uYWxfZGVzY3JpcHRpb246CiAgICAgICAgICBkZXNjcmlwdGlvbjogQW55IGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIHRoZSBuYXR1cmUgb2YgY2FuY2VsbGF0aW9uCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvRGVzY3JpcHRvcicKICAgIENhbmNlbGxhdGlvblRlcm06CiAgICAgIGRlc2NyaXB0aW9uOiBEZXNjcmliZXMgdGhlIGNhbmNlbGxhdGlvbiB0ZXJtcyBvZiBhbiBpdGVtIG9yIGFuIG9yZGVyLiBUaGlzIGNhbiBiZSByZWZlcmVuY2VkIGF0IGFuIGl0ZW0gb3Igb3JkZXIgbGV2ZWwuIEl0ZW0tbGV2ZWwgY2FuY2VsbGF0aW9uIHRlcm1zIGNhbiBvdmVycmlkZSB0aGUgdGVybXMgYXQgdGhlIG9yZGVyIGxldmVsLgogICAgICB0eXBlOiBvYmplY3QKICAgICAgcHJvcGVydGllczoKICAgICAgICBmdWxmaWxsbWVudF9zdGF0ZToKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgc3RhdGUgb2YgZnVsZmlsbG1lbnQgZHVyaW5nIHdoaWNoIHRoaXMgdGVybSBpcyBhcHBsaWNhYmxlLgogICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgIC0gJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0Z1bGZpbGxtZW50U3RhdGUnCiAgICAgICAgcmVhc29uX3JlcXVpcmVkOgogICAgICAgICAgZGVzY3JpcHRpb246IEluZGljYXRlcyB3aGV0aGVyIGEgcmVhc29uIGlzIHJlcXVpcmVkIHRvIGNhbmNlbCB0aGUgb3JkZXIKICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICBjYW5jZWxfYnk6CiAgICAgICAgICBkZXNjcmlwdGlvbjogSW5mb3JtYXRpb24gcmVsYXRlZCB0byB0aGUgdGltZSBvZiBjYW5jZWxsYXRpb24uCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvVGltZScKICAgICAgICBjYW5jZWxsYXRpb25fZmVlOgogICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0ZlZScKICAgICAgICB4aW5wdXQ6CiAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvWElucHV0JwogICAgICAgIGV4dGVybmFsX3JlZjoKICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9NZWRpYUZpbGUnCiAgICBDYXRhbG9nOgogICAgICBkZXNjcmlwdGlvbjogJ0Rlc2NyaWJlcyB0aGUgcHJvZHVjdHMgb3Igc2VydmljZXMgb2ZmZXJlZCBieSBhIEJQUC4gVGhpcyBpcyB0eXBpY2FsbHkgc2VudCBhcyB0aGUgcmVzcG9uc2UgdG8gYSBzZWFyY2ggaW50ZW50IGZyb20gYSBCQVAuIFRoZSBwYXltZW50IHRlcm1zLCBvZmZlcnMgYW5kIHRlcm1zIG9mIGZ1bGZpbGxtZW50IHN1cHBvcnRlZCBieSB0aGUgQlBQIGNhbiBhbHNvIGJlIGluY2x1ZGVkIGhlcmUuIFRoZSBCUFAgY2FuIHNob3cgaGllcmFyY2hpY2FsIG5hdHVyZSBvZiBwcm9kdWN0cy9zZXJ2aWNlcyBpbiBpdHMgY2F0YWxvZyB1c2luZyB0aGUgcGFyZW50X2NhdGVnb3J5X2lkIGluIGNhdGVnb3JpZXMuIFRoZSBCUFAgY2FuIGFsc28gc2VuZCBhIHR0bCAodGltZSB0byBsaXZlKSBpbiB0aGUgY29udGV4dCB3aGljaCBpcyB0aGUgZHVyYXRpb24gZm9yIHdoaWNoIGEgQkFQIGNhbiBjYWNoZSB0aGUgY2F0YWxvZyBhbmQgdXNlIHRoZSBjYWNoZWQgY2F0YWxvZy4gIDxicj5UaGlzIGhhcyBwcm9wZXJ0aWVzIGxpa2UgYmJwL2Rlc2NyaXB0b3IsYmJwL2NhdGVnb3JpZXMsYmJwL2Z1bGZpbGxtZW50cyxiYnAvcGF5bWVudHMsYmJwL29mZmVycyxiYnAvcHJvdmlkZXJzIGFuZCBleHA8YnI+VGhpcyBpcyB1c2VkIGluIHRoZSBmb2xsb3dpbmcgc2l0dWF0aW9ucy48YnI+PHVsPjxsaT5UaGlzIGlzIHR5cGljYWxseSB1c2VkIGluIHRoZSBkaXNjb3Zlcnkgc3RhZ2Ugd2hlbiB0aGUgQlBQIHNlbmRzIHRoZSBkZXRhaWxzIG9mIHRoZSBwcm9kdWN0cyBhbmQgc2VydmljZXMgaXQgb2ZmZXJzIGFzIHJlc3BvbnNlIHRvIGEgc2VhcmNoIGludGVudCBmcm9tIHRoZSBCQVAuIDwvbGk+PC91bD4nCiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIGRlc2NyaXB0b3I6CiAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvRGVzY3JpcHRvcicKICAgICAgICBmdWxmaWxsbWVudHM6CiAgICAgICAgICBkZXNjcmlwdGlvbjogRnVsZmlsbG1lbnQgbW9kZXMgb2ZmZXJlZCBhdCB0aGUgQlBQIGxldmVsLiBUaGlzIGlzIHVzZWQgd2hlbiBhIEJQUCBpdHNlbGYgb2ZmZXJzIGZ1bGZpbGxtZW50cyBvbiBiZWhhbGYgb2YgdGhlIHByb3ZpZGVycyBpdCBoYXMgb25ib2FyZGVkLgogICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvRnVsZmlsbG1lbnQnCiAgICAgICAgcGF5bWVudHM6CiAgICAgICAgICBkZXNjcmlwdGlvbjogUGF5bWVudCB0ZXJtcyBvZmZlcmVkIGJ5IHRoZSBCUFAgZm9yIGFsbCB0cmFuc2FjdGlvbnMuIFRoaXMgY2FuIGJlIG92ZXJyaWRlbiBhdCB0aGUgcHJvdmlkZXIgbGV2ZWwuCiAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9QYXltZW50JwogICAgICAgIG9mZmVyczoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBPZmZlcnMgYXQgdGhlIEJQUC1sZXZlbC4gVGhpcyBpcyBjb21tb24gYWNyb3NzIGFsbCBwcm92aWRlcnMgb25ib2FyZGVkIGJ5IHRoZSBCUFAuCiAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9PZmZlcicKICAgICAgICBwcm92aWRlcnM6CiAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9Qcm92aWRlcicKICAgICAgICBleHA6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGltZXN0YW1wIGFmdGVyIHdoaWNoIGNhdGFsb2cgd2lsbCBleHBpcmUKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZm9ybWF0OiBkYXRlLXRpbWUKICAgICAgICB0dGw6CiAgICAgICAgICBkZXNjcmlwdGlvbjogRHVyYXRpb24gaW4gc2Vjb25kcyBhZnRlciB3aGljaCB0aGlzIGNhdGFsb2cgd2lsbCBleHBpcmUKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgQ2F0ZWdvcnk6CiAgICAgIGRlc2NyaXB0aW9uOiBBIGxhYmVsIHVuZGVyIHdoaWNoIGEgY29sbGVjdGlvbiBvZiBpdGVtcyBjYW4gYmUgZ3JvdXBlZC4KICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgaWQ6CiAgICAgICAgICBkZXNjcmlwdGlvbjogSUQgb2YgdGhlIGNhdGVnb3J5CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICBwYXJlbnRfY2F0ZWdvcnlfaWQ6CiAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvQ2F0ZWdvcnkvcHJvcGVydGllcy9pZCcKICAgICAgICBkZXNjcmlwdG9yOgogICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0Rlc2NyaXB0b3InCiAgICAgICAgdGltZToKICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9UaW1lJwogICAgICAgIHR0bDoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaW1lIHRvIGxpdmUgZm9yIGFuIGluc3RhbmNlIG9mIHRoaXMgc2NoZW1hCiAgICAgICAgdGFnczoKICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1RhZ0dyb3VwJwogICAgQ2lyY2xlOgogICAgICBkZXNjcmlwdGlvbjogRGVzY3JpYmVzIGEgY2lyY3VsYXIgcmVnaW9uIG9mIGEgc3BlY2lmaWVkIHJhZGl1cyBjZW50ZXJlZCBhdCBhIHNwZWNpZmllZCBHUFMgY29vcmRpbmF0ZS4KICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgZ3BzOgogICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0dwcycKICAgICAgICByYWRpdXM6CiAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvU2NhbGFyJwogICAgQ2l0eToKICAgICAgZGVzY3JpcHRpb246IERlc2NyaWJlcyBhIGNpdHkKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgbmFtZToKICAgICAgICAgIGRlc2NyaXB0aW9uOiBOYW1lIG9mIHRoZSBjaXR5CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICBjb2RlOgogICAgICAgICAgZGVzY3JpcHRpb246IENpdHkgY29kZQogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICBDb250YWN0OgogICAgICBkZXNjcmlwdGlvbjogRGVzY3JpYmVzIHRoZSBjb250YWN0IGluZm9ybWF0aW9uIG9mIGFuIGVudGl0eQogICAgICB0eXBlOiBvYmplY3QKICAgICAgcHJvcGVydGllczoKICAgICAgICBwaG9uZToKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIGVtYWlsOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgamNhcmQ6CiAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgIGRlc2NyaXB0aW9uOiBBIEpjYXJkIG9iamVjdCBhcyBwZXIgZHJhZnQtaWV0Zi1qY2FyZGNhbC1qY2FyZC0wMyBzcGVjaWZpY2F0aW9uCiAgICBDb250ZXh0OgogICAgICBkZXNjcmlwdGlvbjogJ0V2ZXJ5IEFQSSBjYWxsIGluIGJlY2tuIHByb3RvY29sIGhhcyBhIGNvbnRleHQuIEl0IHByb3ZpZGVzIGEgaGlnaC1sZXZlbCBvdmVydmlldyB0byB0aGUgcmVjZWl2ZXIgYWJvdXQgdGhlIG5hdHVyZSBvZiB0aGUgaW50ZW5kZWQgdHJhbnNhY3Rpb24uIFR5cGljYWxseSwgaXQgaXMgdGhlIEJBUCB0aGF0IHNldHMgdGhlIHRyYW5zYWN0aW9uIGNvbnRleHQgYmFzZWQgb24gdGhlIGNvbnN1bWVyJydzIGxvY2F0aW9uIGFuZCBhY3Rpb24gb24gdGhlaXIgVUkuIEJ1dCBzb21ldGltZXMsIGR1cmluZyB1bnNvbGljaXRlZCBjYWxsYmFja3MsIHRoZSBCUFAgYWxzbyBzZXRzIHRoZSB0cmFuc2FjdGlvbiBjb250ZXh0IGJ1dCBpdCBpcyB1c3VhbGx5IHRoZSBzYW1lIGFzIHRoZSBjb250ZXh0IG9mIGEgcHJldmlvdXMgZnVsbC1jeWNsZSwgcmVxdWVzdC1jYWxsYmFjayBpbnRlcmFjdGlvbiBiZXR3ZWVuIHRoZSBCQVAgYW5kIHRoZSBCUFAuIFRoZSBjb250ZXh0IG9iamVjdCBjb250YWlucyBmb3VyIHR5cGVzIG9mIGZpZWxkcy4gPG9sPjxsaT5EZW1vZ3JhcGhpYyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdHJhbnNhY3Rpb24gdXNpbmcgZmllbGRzIGxpa2UgYGRvbWFpbmAsIGBjb3VudHJ5YCwgYW5kIGByZWdpb25gLjwvbGk+PGxpPkFkZHJlc3NpbmcgZGV0YWlscyBsaWtlIHRoZSBzZW5kaW5nIGFuZCByZWNlaXZpbmcgcGxhdGZvcm0nJ3MgSUQgYW5kIEFQSSBVUkwuPC9saT48bGk+SW50ZXJvcGVyYWJpbGl0eSBpbmZvcm1hdGlvbiBsaWtlIHRoZSBwcm90b2NvbCB2ZXJzaW9uIHRoYXQgaW1wbGVtZW50ZWQgYnkgdGhlIHNlbmRlciBhbmQsPC9saT48bGk+VHJhbnNhY3Rpb24gZGV0YWlscyBsaWtlIHRoZSBtZXRob2QgYmVpbmcgY2FsbGVkIGF0IHRoZSByZWNlaXZlcicncyBlbmRwb2ludCwgdGhlIHRyYW5zYWN0aW9uX2lkIHRoYXQgcmVwcmVzZW50cyBhbiBlbmQtdG8tZW5kIHVzZXIgc2Vzc2lvbiBhdCB0aGUgQkFQLCBhIG1lc3NhZ2UgSUQgdG8gcGFpciByZXF1ZXN0cyB3aXRoIGNhbGxiYWNrcywgYSB0aW1lc3RhbXAgdG8gY2FwdHVyZSBzZW5kaW5nIHRpbWVzLCBhIHR0bCB0byBzcGVjaWZpeSB0aGUgdmFsaWRpdHkgb2YgdGhlIHJlcXVlc3QsIGFuZCBhIGtleSB0byBlbmNyeXB0IGluZm9ybWF0aW9uIGlmIG5lY2Vzc2FyeS48L2xpPjwvb2w+IFRoaXMgb2JqZWN0IG11c3QgYmUgcGFzc2VkIGluIGV2ZXJ5IGludGVyYWN0aW9uIGJldHdlZW4gYSBCQVAgYW5kIGEgQlBQLiBJbiBIVFRQL1MgaW1wbGVtZW50YXRpb25zLCBpdCBpcyBub3QgbmVjZXNzYXJ5IHRvIHNlbmQgdGhlIGNvbnRleHQgZHVyaW5nIHRoZSBzeW5jaHJvbm91cyByZXNwb25zZS4gSG93ZXZlciwgaW4gYXN5bmNocm9ub3VzIHByb3RvY29scywgdGhlIGNvbnRleHQgbXVzdCBiZSBzZW50IGR1cmluZyBhbGwgaW50ZXJhY3Rpb25zLCcKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgZG9tYWluOgogICAgICAgICAgZGVzY3JpcHRpb246IERvbWFpbiBjb2RlIHRoYXQgaXMgcmVsZXZhbnQgdG8gdGhpcyB0cmFuc2FjdGlvbiBjb250ZXh0CiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvRG9tYWluL3Byb3BlcnRpZXMvY29kZScKICAgICAgICBsb2NhdGlvbjoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgbG9jYXRpb24gd2hlcmUgdGhlIHRyYW5zYWN0aW9uIGlzIGludGVuZGVkIHRvIGJlIGZ1bGZpbGxlZC4KICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9Mb2NhdGlvbicKICAgICAgICBhY3Rpb246CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIEJlY2tuIHByb3RvY29sIG1ldGhvZCBiZWluZyBjYWxsZWQgYnkgdGhlIHNlbmRlciBhbmQgZXhlY3V0ZWQgYXQgdGhlIHJlY2VpdmVyLgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgdmVyc2lvbjoKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZGVzY3JpcHRpb246IFZlcnNpb24gb2YgdHJhbnNhY3Rpb24gcHJvdG9jb2wgYmVpbmcgdXNlZCBieSB0aGUgc2VuZGVyLgogICAgICAgIGJhcF9pZDoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBTdWJzY3JpYmVyIElEIG9mIHRoZSBCQVAKICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAtIGRlc2NyaXB0aW9uOiAnQSBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgcGxhdGZvcm0sIFR5cGljYWxseSBpdCBpcyB0aGUgZnVsbHkgcXVhbGlmaWVkIGRvbWFpbiBuYW1lIChGUUROKSBvZiB0aGUgcGxhdGZvcm0uJwogICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIGJhcF91cmk6CiAgICAgICAgICBkZXNjcmlwdGlvbjogU3Vic2NyaWJlciBVUkwgb2YgdGhlIEJBUCBmb3IgYWNjZXB0aW5nIGNhbGxiYWNrcyBmcm9tIEJQUHMuCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSBkZXNjcmlwdGlvbjogVGhlIGNhbGxiYWNrIFVSTCBvZiB0aGUgU3Vic2NyaWJlci4gVGhpcyBzaG91bGQgbmVjZXNzYXJpbHkgY29udGFpbiB0aGUgc2FtZSBkb21haW4gbmFtZSBhcyBzZXQgaW4gYHN1YnNjcmliZXJfaWRgYC4KICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBmb3JtYXQ6IHVyaQogICAgICAgIGJwcF9pZDoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBTdWJzY3JpYmVyIElEIG9mIHRoZSBCUFAKICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9Db250ZXh0L3Byb3BlcnRpZXMvYmFwX2lkL2FsbE9mLzAnCiAgICAgICAgYnBwX3VyaToKICAgICAgICAgIGRlc2NyaXB0aW9uOiBTdWJzY3JpYmVyIFVSTCBvZiB0aGUgQlBQIGZvciBhY2NlcHRpbmcgY2FsbHMgZnJvbSBCQVBzLgogICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgIC0gJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0NvbnRleHQvcHJvcGVydGllcy9iYXBfdXJpL2FsbE9mLzAnCiAgICAgICAgdHJhbnNhY3Rpb25faWQ6CiAgICAgICAgICBkZXNjcmlwdGlvbjogJ1RoaXMgaXMgYSB1bmlxdWUgdmFsdWUgd2hpY2ggcGVyc2lzdHMgYWNyb3NzIGFsbCBBUEkgY2FsbHMgZnJvbSBgc2VhcmNoYCB0aHJvdWdoIGBjb25maXJtYC4gVGhpcyBpcyBkb25lIHRvIGluZGljYXRlIGFuIGFjdGl2ZSB1c2VyIHNlc3Npb24gYWNyb3NzIG11bHRpcGxlIHJlcXVlc3RzLiBUaGUgQlBQcyBjYW4gdXNlIHRoaXMgdmFsdWUgdG8gcHVzaCBwZXJzb25hbGl6ZWQgcmVjb21tZW5kYXRpb25zLCBhbmQgZHluYW1pYyBvZmZlcmluZ3MgcmVsYXRlZCB0byBhbiBvbmdvaW5nIHRyYW5zYWN0aW9uIGRlc3BpdGUgYmVpbmcgdW5hd2FyZSBvZiB0aGUgdXNlciBhY3RpdmUgb24gdGhlIEJBUC4nCiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGZvcm1hdDogdXVpZAogICAgICAgIG1lc3NhZ2VfaWQ6CiAgICAgICAgICBkZXNjcmlwdGlvbjogJ1RoaXMgaXMgYSB1bmlxdWUgdmFsdWUgd2hpY2ggcGVyc2lzdHMgZHVyaW5nIGEgcmVxdWVzdCAvIGNhbGxiYWNrIGN5Y2xlLiBTaW5jZSBiZWNrbiBwcm90b2NvbCBBUElzIGFyZSBhc3luY2hyb25vdXMsIEJBUHMgbmVlZCBhIGNvbW1vbiB2YWx1ZSB0byBtYXRjaCBhbiBpbmNvbWluZyBjYWxsYmFjayBmcm9tIGEgQlBQIHRvIGFuIGVhcmxpZXIgY2FsbC4gVGhpcyB2YWx1ZSBjYW4gYWxzbyBiZSB1c2VkIHRvIGlnbm9yZSBkdXBsaWNhdGUgbWVzc2FnZXMgY29taW5nIGZyb20gdGhlIEJQUC4gSXQgaXMgcmVjb21tZW5kZWQgdG8gZ2VuZXJhdGUgYSBmcmVzaCBtZXNzYWdlX2lkIGZvciBldmVyeSBuZXcgaW50ZXJhY3Rpb24uIFdoZW4gc2VuZGluZyB1bnNvbGljaXRlZCBjYWxsYmFja3MsIEJQUHMgbXVzdCBnZW5lcmF0ZSBhIG5ldyBtZXNzYWdlX2lkLicKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZm9ybWF0OiB1dWlkCiAgICAgICAgdGltZXN0YW1wOgogICAgICAgICAgZGVzY3JpcHRpb246IFRpbWUgb2YgcmVxdWVzdCBnZW5lcmF0aW9uIGluIFJGQzMzMzkgZm9ybWF0CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGZvcm1hdDogZGF0ZS10aW1lCiAgICAgICAga2V5OgogICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBlbmNyeXB0aW9uIHB1YmxpYyBrZXkgb2YgdGhlIHNlbmRlcgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgdHRsOgogICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBkdXJhdGlvbiBpbiBJU084NjAxIGZvcm1hdCBhZnRlciB0aW1lc3RhbXAgZm9yIHdoaWNoIHRoaXMgbWVzc2FnZSBob2xkcyB2YWxpZAogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICBDb3VudHJ5OgogICAgICBkZXNjcmlwdGlvbjogRGVzY3JpYmVzIGEgY291bnRyeQogICAgICB0eXBlOiBvYmplY3QKICAgICAgcHJvcGVydGllczoKICAgICAgICBuYW1lOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBkZXNjcmlwdGlvbjogTmFtZSBvZiB0aGUgY291bnRyeQogICAgICAgIGNvZGU6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGRlc2NyaXB0aW9uOiBDb3VudHJ5IGNvZGUgYXMgcGVyIElTTyAzMTY2LTEgYW5kIElTTyAzMTY2LTIgZm9ybWF0CiAgICBDcmVkZW50aWFsOgogICAgICBkZXNjcmlwdGlvbjogRGVzY3JpYmVzIGEgY3JlZGVudGlhbCBvZiBhbiBlbnRpdHkgLSBQZXJzb24gb3IgT3JnYW5pemF0aW9uCiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIGlkOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgdHlwZToKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZGVmYXVsdDogVmVyaWZpYWJsZUNyZWRlbnRpYWwKICAgICAgICB1cmw6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVVJMIG9mIHRoZSBjcmVkZW50aWFsCiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGZvcm1hdDogdXJpCiAgICBDdXN0b21lcjoKICAgICAgZGVzY3JpcHRpb246IERlc2NyaWJlcyBhIGN1c3RvbWVyIGJ1eWluZy9hdmFpbGluZyBhIHByb2R1Y3Qgb3IgYSBzZXJ2aWNlCiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIHBlcnNvbjoKICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9QZXJzb24nCiAgICAgICAgY29udGFjdDoKICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9Db250YWN0JwogICAgRGVjaW1hbFZhbHVlOgogICAgICBkZXNjcmlwdGlvbjogRGVzY3JpYmVzIGEgbnVtZXJpY2FsIHZhbHVlIGluIGRlY2ltYWwgZm9ybQogICAgICB0eXBlOiBzdHJpbmcKICAgICAgcGF0dGVybjogJ1srLV0/KFswLTldKlsuXSk/WzAtOV0rJwogICAgRGVzY3JpcHRvcjoKICAgICAgZGVzY3JpcHRpb246IFBoeXNpY2FsIGRlc2NyaXB0aW9uIG9mIHNvbWV0aGluZy4KICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgbmFtZToKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIGNvZGU6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICBzaG9ydF9kZXNjOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgbG9uZ19kZXNjOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgYWRkaXRpb25hbF9kZXNjOgogICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICB1cmw6CiAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgIGNvbnRlbnRfdHlwZToKICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBlbnVtOgogICAgICAgICAgICAgICAgLSB0ZXh0L3BsYWluCiAgICAgICAgICAgICAgICAtIHRleHQvaHRtbAogICAgICAgICAgICAgICAgLSBhcHBsaWNhdGlvbi9qc29uCiAgICAgICAgbWVkaWE6CiAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9NZWRpYUZpbGUnCiAgICAgICAgaW1hZ2VzOgogICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvSW1hZ2UnCiAgICBEb21haW46CiAgICAgIGRlc2NyaXB0aW9uOiAnRGVzY3JpYmVkIHRoZSBpbmR1c3RyeSBzZWN0b3Igb3Igc3ViLXNlY3Rvci4gVGhlIG5ldHdvcmsgcG9saWN5IHNob3VsZCBjb250YWluIGNvZGVzIGZvciBhbGwgdGhlIGluZHVzdHJ5IHNlY3RvcnMgc3VwcG9ydGVkIGJ5IHRoZSBuZXR3b3JrLiBEb21haW5zIGNhbiBiZSBjcmVhdGVkIGluIHZhcnlpbmcgbGV2ZWxzIG9mIGdyYW51bGFyaXR5LiBUaGUgZ3JhbnVsYXJpdHkgb2YgYSBkb21haW4gY2FuIGJlIGRlY2lkZWQgYnkgdGhlIHBhcnRpY2lwYW50cyBvZiB0aGUgbmV0d29yay4gVG9vIGJyb2FkIGRvbWFpbnMgd2lsbCByZXN1bHQgaW4gaXJyZWxldmFudCBzZWFyY2ggYnJvYWRjYXN0IGNhbGxzIHRvIEJQUHMgdGhhdCBkb24nJ3QgaGF2ZSBzZXJ2aWNlcyBzdXBwb3J0aW5nIHRoZSBkb21haW4uIFRvbyBuYXJyb3cgZG9tYWlucyB3aWxsIHJlc3VsdCBpbiBhIGxhcmdlIG51bWJlciBvZiByZWdpc3RyeSBlbnRyaWVzIGZvciBlYWNoIEJQUC4gSXQgaXMgcmVjb21tZW5kZWQgdGhhdCBuZXR3b3JrIGZhY2lsaXRhdG9ycyBhY3RpdmVseSBjb2xsYWJvcmF0ZSB3aXRoIHZhcmlvdXMgd29ya2luZyBncm91cHMgYW5kIG5ldHdvcmsgcGFydGljaXBhbnRzIHRvIGNhcmVmdWxseSBjaG9vc2UgZG9tYWluIGNvZGVzIGtlZXBpbmcgaW4gbWluZCByZWxldmFuY2UsIHBlcmZvcm1hbmNlLCBhbmQgb3Bwb3J0dW5pdHkgY29zdC4gSXQgaXMgcmVjb21tZW5kZWQgdGhhdCBuZXR3b3JrcyBjaG9vc2UgYnJvYWQgZG9tYWlucyBsaWtlIG1vYmlsaXR5LCBsb2dpc3RpY3MsIGhlYWx0aGNhcmUgZXRjLCBhbmQgcHJvZ3Jlc3NpdmVseSBncmFudWxhcml6ZSB0aGVtIGFzIGFuZCB3aGVuIHRoZSBudW1iZXIgb2YgbmV0d29yayBwYXJ0aWNpcGFudHMgZm9yIGVhY2ggZG9tYWluIGdyb3dzIGxhcmdlLicKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgbmFtZToKICAgICAgICAgIGRlc2NyaXB0aW9uOiBOYW1lIG9mIHRoZSBkb21haW4KICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIGNvZGU6CiAgICAgICAgICBkZXNjcmlwdGlvbjogJ1N0YW5kYXJkIGNvZGUgcmVwcmVzZW50aW5nIHRoZSBkb21haW4uIFRoZSBzdGFuZGFyZCBpcyB1c3VhbGx5IHB1Ymxpc2hlZCBhcyBwYXJ0IG9mIHRoZSBuZXR3b3JrIHBvbGljeS4gRnVydGhlcm1vcmUsIHRoZSBuZXR3b3JrIGZhY2lsaXRhdG9yIHNob3VsZCBhbHNvIHByb3ZpZGUgYSBtZWNoYW5pc20gdG8gcHJvdmlkZSB0aGUgc3VwcG9ydGVkIGRvbWFpbnMgb2YgYSBuZXR3b3JrLicKICAgICAgICBhZGRpdGlvbmFsX2luZm86CiAgICAgICAgICBkZXNjcmlwdGlvbjogQSB1cmwgdGhhdCBjb250YWlucyBhZGR0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhhdCBkb21haW4uCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvTWVkaWFGaWxlJwogICAgRHVyYXRpb246CiAgICAgIGRlc2NyaXB0aW9uOiBEZXNjcmliZXMgZHVyYXRpb24gYXMgcGVyIElTTzg2MDEgZm9ybWF0CiAgICAgIHR5cGU6IHN0cmluZwogICAgRXJyb3I6CiAgICAgIGRlc2NyaXB0aW9uOiAnRGVzY3JpYmVzIGFuIGVycm9yIG9iamVjdCB0aGF0IGlzIHJldHVybmVkIGJ5IGEgQkFQLCBCUFAgb3IgQkcgYXMgYSByZXNwb25zZSBvciBjYWxsYmFjayB0byBhbiBhY3Rpb24gYnkgYW5vdGhlciBuZXR3b3JrIHBhcnRpY2lwYW50LiBUaGlzIG9iamVjdCBpcyBzZW50IHdoZW4gYW55IHJlcXVlc3QgcmVjZWl2ZWQgYnkgYSBuZXR3b3JrIHBhcnRpY2lwYW50IGlzIHVuYWNjZXB0YWJsZS4gVGhpcyBvYmplY3QgY2FuIGJlIHNlbnQgZWl0aGVyIGR1cmluZyBBY2sgb3Igd2l0aCB0aGUgY2FsbGJhY2suJwogICAgICB0eXBlOiBvYmplY3QKICAgICAgcHJvcGVydGllczoKICAgICAgICBjb2RlOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBkZXNjcmlwdGlvbjogJ1N0YW5kYXJkIGVycm9yIGNvZGUuIEZvciBmdWxsIGxpc3Qgb2YgZXJyb3IgY29kZXMsIHJlZmVyIHRvIGRvY3MvcHJvdG9jb2wtZHJhZnRzL0JFQ0tOLTAwNS1FUlJPUi1DT0RFUy1EUkFGVC0wMS5tZCBvZiB0aGlzIHJlcG8iJwogICAgICAgIHBhdGhzOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBkZXNjcmlwdGlvbjogUGF0aCB0byBqc29uIHNjaGVtYSBnZW5lcmF0aW5nIHRoZSBlcnJvci4gVXNlZCBvbmx5IGR1cmluZyBqc29uIHNjaGVtYSB2YWxpZGF0aW9uIGVycm9ycwogICAgICAgIG1lc3NhZ2U6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGRlc2NyaXB0aW9uOiBIdW1hbiByZWFkYWJsZSBtZXNzYWdlIGRlc2NyaWJpbmcgdGhlIGVycm9yLiBVc2VkIG1haW5seSBmb3IgbG9nZ2luZy4gTm90IHJlY29tbWVuZGVkIHRvIGJlIHNob3duIHRvIHRoZSB1c2VyLgogICAgRmVlOgogICAgICBkZXNjcmlwdGlvbjogQSBmZWUgYXBwbGllZCBvbiBhIHBhcnRpY3VsYXIgZW50aXR5CiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIHBlcmNlbnRhZ2U6CiAgICAgICAgICBkZXNjcmlwdGlvbjogUGVyY2VudGFnZSBvZiBhIHZhbHVlCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvRGVjaW1hbFZhbHVlJwogICAgICAgIGFtb3VudDoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBBIGZpeGVkIHZhbHVlCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvUHJpY2UnCiAgICBGb3JtOgogICAgICBkZXNjcmlwdGlvbjogRGVzY3JpYmVzIGEgZm9ybQogICAgICB0eXBlOiBvYmplY3QKICAgICAgcHJvcGVydGllczoKICAgICAgICB1cmw6CiAgICAgICAgICBkZXNjcmlwdGlvbjogJ1RoZSBVUkwgZnJvbSB3aGVyZSB0aGUgZm9ybSBjYW4gYmUgZmV0Y2hlZC4gVGhlIGNvbnRlbnQgZmV0Y2hlZCBmcm9tIHRoZSB1cmwgbXVzdCBiZSBwcm9jZXNzZWQgYXMgcGVyIHRoZSBtaW1lX3R5cGUgc3BlY2lmaWVkIGluIHRoaXMgb2JqZWN0LiBPbmNlIGZldGNoZWQsIHRoZSByZW5kZXJpbmcgcGxhdGZvcm0gY2FuIGNob29zZWQgdG8gcmVuZGVyIHRoZSBmb3JtIGFzLWlzIGFzIGFuIGVtYmVkZGFibGUgZWxlbWVudDsgb3IgcHJvY2VzcyBpdCBmdXJ0aGVyIHRvIGJsZW5kIHdpdGggdGhlIHRoZW1lIG9mIHRoZSBhcHBsaWNhdGlvbi4gSW4gY2FzZSB0aGUgaW50ZXJmYWNlIGlzIG5vbi12aXN1YWwsIHRoZSB0aGUgcmVuZGVyIGNhbiBwcm9jZXNzIHRoZSBmb3JtIGRhdGEgYW5kIHJlcHJvZHVjZSBpdCBhcyBwZXIgdGhlIHN0YW5kYXJkIHNwZWNpZmllZCBpbiB0aGUgZm9ybS4nCiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGZvcm1hdDogdXJpCiAgICAgICAgZGF0YToKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgZm9ybSBzdWJtaXNzaW9uIGRhdGEKICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6CiAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIG1pbWVfdHlwZToKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGlzIGZpZWxkIGluZGljYXRlcyB0aGUgbmF0dXJlIGFuZCBmb3JtYXQgb2YgdGhlIGZvcm0gcmVjZWl2ZWQgYnkgcXVlcnlpbmcgdGhlIHVybC4gTUlNRSB0eXBlcyBhcmUgZGVmaW5lZCBhbmQgc3RhbmRhcmRpemVkIGluIElFVEYncyBSRkMgNjgzOC4KICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZW51bToKICAgICAgICAgICAgLSB0ZXh0L2h0bWwKICAgICAgICAgICAgLSBhcHBsaWNhdGlvbi94bWwKICAgICAgICBzdWJtaXNzaW9uX2lkOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBmb3JtYXQ6IHV1aWQKICAgIEZ1bGZpbGxtZW50OgogICAgICBkZXNjcmlwdGlvbjogRGVzY3JpYmVzIGhvdyBhIGFuIG9yZGVyIHdpbGwgYmUgcmVuZGVyZWQvZnVsZmlsbGVkIHRvIHRoZSBlbmQtY3VzdG9tZXIKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgaWQ6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVW5pcXVlIHJlZmVyZW5jZSBJRCB0byB0aGUgZnVsZmlsbG1lbnQgb2YgYW4gb3JkZXIKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIHR5cGU6CiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0EgY29kZSB0aGF0IGRlc2NyaWJlcyB0aGUgbW9kZSBvZiBmdWxmaWxsbWVudC4gVGhpcyBpcyB0eXBpY2FsbHkgc2V0IHdoZW4gdGhlcmUgYXJlIG11bHRpcGxlIHdheXMgYW4gb3JkZXIgY2FuIGJlIGZ1bGZpbGxlZC4gRm9yIGV4YW1wbGUsIGEgcmV0YWlsIG9yZGVyIGNhbiBiZSBmdWxmaWxsZWQgZWl0aGVyIHZpYSBzdG9yZSBwaWNrdXAgb3IgYSBob21lIGRlbGl2ZXJ5LiBTaW1pbGFybHksIGEgbWVkaWNhbCBjb25zdWx0YXRpb24gY2FuIGJlIHByb3ZpZGVkIGVpdGhlciBpbi1wZXJzb24gb3IgdmlhIHRlbGUtY29uc3VsdGF0aW9uLiBUaGUgbmV0d29yayBwb2xpY3kgbXVzdCBwdWJsaXNoIHN0YW5kYXJkIGZ1bGZpbGxtZW50IHR5cGUgY29kZXMgZm9yIHRoZSBkaWZmZXJlbnQgbW9kZXMgb2YgZnVsZmlsbG1lbnQuJwogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgcmF0ZWFibGU6CiAgICAgICAgICBkZXNjcmlwdGlvbjogV2hldGhlciB0aGUgZnVsZmlsbG1lbnQgY2FuIGJlIHJhdGVkIG9yIG5vdAogICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgIHJhdGluZzoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgcmF0aW5nIHZhbHVlIG9mIHRoZSBmdWxmdWxsbWVudCBzZXJ2aWNlLgogICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgIC0gJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1JhdGluZy9wcm9wZXJ0aWVzL3ZhbHVlJwogICAgICAgIHN0YXRlOgogICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBjdXJyZW50IHN0YXRlIG9mIGZ1bGZpbGxtZW50LiBUaGUgQlBQIG11c3Qgc2V0IHRoaXMgdmFsdWUgd2hlbmV2ZXIgdGhlIHN0YXRlIG9mIHRoZSBvcmRlciBmdWxmaWxsbWVudCBjaGFuZ2VzIGFuZCBmaXJlIGFuIHVuc29saWNpdGVkIGBvbl9zdGF0dXNgIGNhbGwuCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvRnVsZmlsbG1lbnRTdGF0ZScKICAgICAgICB0cmFja2luZzoKICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgIGRlc2NyaXB0aW9uOiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgZnVsZmlsbG1lbnQgYWxsb3dzIHRyYWNraW5nCiAgICAgICAgICBkZWZhdWx0OiBmYWxzZQogICAgICAgIGN1c3RvbWVyOgogICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBwZXJzb24gdGhhdCB3aWxsIHVsdGltYXRlbHkgcmVjZWl2ZSB0aGUgb3JkZXIKICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9DdXN0b21lcicKICAgICAgICBhZ2VudDoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgYWdlbnQgdGhhdCBpcyBjdXJyZW50bHkgaGFuZGxpbmcgdGhlIGZ1bGZpbGxtZW50IG9mIHRoZSBvcmRlcgogICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgIC0gJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0FnZW50JwogICAgICAgIGNvbnRhY3Q6CiAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvQ29udGFjdCcKICAgICAgICB2ZWhpY2xlOgogICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1ZlaGljbGUnCiAgICAgICAgc3RvcHM6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIGxpc3Qgb2YgbG9naWNhbCBzdG9wcyBlbmNvdW50ZXJlZCBkdXJpbmcgdGhlIGZ1bGZpbGxtZW50IG9mIGFuIG9yZGVyLgogICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvU3RvcCcKICAgICAgICBwYXRoOgogICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBwaHlzaWNhbCBwYXRoIHRha2VuIGJ5IHRoZSBhZ2VudCB0aGF0IGNhbiBiZSByZW5kZXJlZCBvbiBhIG1hcC4gVGhlIGFsbG93ZWQgZm9ybWF0IG9mIHRoaXMgcHJvcGVydHkgY2FuIGJlIHNldCBieSB0aGUgbmV0d29yay4KICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIHRhZ3M6CiAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9UYWdHcm91cCcKICAgIEZ1bGZpbGxtZW50U3RhdGU6CiAgICAgIGRlc2NyaXB0aW9uOiBEZXNjcmliZXMgdGhlIHN0YXRlIG9mIGZ1bGZpbGxtZW50CiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIGRlc2NyaXB0b3I6CiAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvRGVzY3JpcHRvcicKICAgICAgICB1cGRhdGVkX2F0OgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBmb3JtYXQ6IGRhdGUtdGltZQogICAgICAgIHVwZGF0ZWRfYnk6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGRlc2NyaXB0aW9uOiBJRCBvZiBlbnRpdHkgd2hpY2ggY2hhbmdlZCB0aGUgc3RhdGUKICAgIEdwczoKICAgICAgZGVzY3JpcHRpb246IERlc2NyaWJlcyBhIEdQUyBjb29yZGluYXRlCiAgICAgIHR5cGU6IHN0cmluZwogICAgICBwYXR0ZXJuOiAnXlstK10/KFsxLThdP1xkKFwuXGQrKT98OTAoXC4wKyk/KSxccypbLStdPygxODAoXC4wKyk/fCgoMVswLTddXGQpfChbMS05XT9cZCkpKFwuXGQrKT8pJCcKICAgIEltYWdlOgogICAgICBkZXNjcmlwdGlvbjogRGVzY3JpYmVzIGFuIGltYWdlCiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIHVybDoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBVUkwgdG8gdGhlIGltYWdlLiBUaGlzIGNhbiBiZSBhIGRhdGEgdXJsIG9yIGFuIHJlbW90ZSB1cmwKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZm9ybWF0OiB1cmkKICAgICAgICBzaXplX3R5cGU6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIHNpemUgb2YgdGhlIGltYWdlLiBUaGUgbmV0d29yayBwb2xpY3kgY2FuIGRlZmluZSB0aGUgZGVmYXVsdCBkaW1lbnNpb25zIG9mIGVhY2ggdHlwZQogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBlbnVtOgogICAgICAgICAgICAtIHhzCiAgICAgICAgICAgIC0gc20KICAgICAgICAgICAgLSBtZAogICAgICAgICAgICAtIGxnCiAgICAgICAgICAgIC0geGwKICAgICAgICAgICAgLSBjdXN0b20KICAgICAgICB3aWR0aDoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBXaWR0aCBvZiB0aGUgaW1hZ2UgaW4gcGl4ZWxzCiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICBoZWlnaHQ6CiAgICAgICAgICBkZXNjcmlwdGlvbjogSGVpZ2h0IG9mIHRoZSBpbWFnZSBpbiBwaXhlbHMKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgSW50ZW50OgogICAgICBkZXNjcmlwdGlvbjogJ1RoZSBpbnRlbnQgdG8gYnV5IG9yIGF2YWlsIGEgcHJvZHVjdCBvciBhIHNlcnZpY2UuIFRoZSBCQVAgY2FuIGRlY2xhcmUgdGhlIGludGVudCBvZiB0aGUgY29uc3VtZXIgY29udGFpbmluZyA8dWw+PGxpPldoYXQgdGhleSB3YW50IChBIHByb2R1Y3QsIHNlcnZpY2UsIG9mZmVyKTwvbGk+PGxpPldobyB0aGV5IHdhbnQgKEEgc2VsbGVyLCBzZXJ2aWNlIHByb3ZpZGVyLCBhZ2VudCBldGMpPC9saT48bGk+V2hlcmUgdGhleSB3YW50IGl0IGFuZCB3aGVyZSB0aGV5IHdhbnQgaXQgZnJvbTwvbGk+PGxpPldoZW4gdGhleSB3YW50IGl0IChzdGFydCBhbmQgZW5kIHRpbWUgb2YgZnVsZmlsbG1lbnQ8L2xpPjxsaT5Ib3cgdGhleSB3YW50IHRvIHBheSBmb3IgaXQ8L2xpPjwvdWw+PGJyPlRoaXMgaGFzIHByb3BlcnRpZXMgbGlrZSBkZXNjcmlwdG9yLHByb3ZpZGVyLGZ1bGZpbGxtZW50LHBheW1lbnQsY2F0ZWdvcnksb2ZmZXIsaXRlbSx0YWdzPGJyPlRoaXMgaXMgdHlwaWNhbGx5IHVzZWQgYnkgdGhlIEJBUCB0byBzZW5kIHRoZSBwdXJwb3NlIG9mIHRoZSB1c2VyJydzIHNlYXJjaCB0byB0aGUgQlBQLiBUaGlzIHdpbGwgYmUgdXNlZCBieSB0aGUgQlBQIHRvIGZpbmQgcHJvZHVjdHMgb3Igc2VydmljZXMgaXQgb2ZmZXJzIHRoYXQgbWF5IG1hdGNoIHRoZSB1c2VyJydzIGludGVudC48YnI+Rm9yIGV4YW1wbGUsIGluIE1vYmlsaXR5LCB0aGUgbW9iaWxpdHkgY29uc3VtZXIgZGVjbGFyZXMgYSBtb2JpbGl0eSBpbnRlbnQuIEluIHRoaXMgY2FzZSwgdGhlIG1vYmlsaXR5IGNvbnN1bWVyIGRlY2xhcmVzIGluZm9ybWF0aW9uIHRoYXQgZGVzY3JpYmVzIHZhcmlvdXMgYXNwZWN0cyBvZiB0aGVpciBqb3VybmV5IGxpa2UsPHVsPjxsaT5XaGVyZSB3b3VsZCB0aGV5IGxpa2UgdG8gYmVnaW4gdGhlaXIgam91cm5leSAoaW50ZW50LmZ1bGZpbGxtZW50LnN0YXJ0LmxvY2F0aW9uKTwvbGk+PGxpPldoZXJlIHdvdWxkIHRoZXkgbGlrZSB0byBlbmQgdGhlaXIgam91cm5leSAoaW50ZW50LmZ1bGZpbGxtZW50LmVuZC5sb2NhdGlvbik8L2xpPjxsaT5XaGVuIHdvdWxkIHRoZXkgbGlrZSB0byBiZWdpbiB0aGVpciBqb3VybmV5IChpbnRlbnQuZnVsZmlsbG1lbnQuc3RhcnQudGltZSk8L2xpPjxsaT5XaGVuIHdvdWxkIHRoZXkgbGlrZSB0byBlbmQgdGhlaXIgam91cm5leSAoaW50ZW50LmZ1bGZpbGxtZW50LmVuZC50aW1lKTwvbGk+PGxpPldobyBpcyB0aGUgdHJhbnNwb3J0IHNlcnZpY2UgcHJvdmlkZXIgdGhleSB3b3VsZCBsaWtlIHRvIGF2YWlsIHNlcnZpY2VzIGZyb20gKGludGVudC5wcm92aWRlcik8L2xpPjxsaT5XaG8gaXMgdHJhdmVsaW5nIChUaGlzIGlzIG5vdCByZWNvbW1lbmRlZCBpbiBwdWJsaWMgbmV0d29ya3MpIChpbnRlbnQuZnVsZmlsbG1lbnQuY3VzdG9tZXIpPC9saT48bGk+V2hhdCBraW5kIG9mIGZhcmUgcHJvZHVjdCB3b3VsZCB0aGV5IGxpa2UgdG8gcHVyY2hhc2UgKGludGVudC5pdGVtKTwvbGk+PGxpPldoYXQgYWRkLW9uIHNlcnZpY2VzIHdvdWxkIHRoZXkgbGlrZSB0byBhdmFpbDwvbGk+PGxpPldoYXQgb2ZmZXJzIHdvdWxkIHRoZXkgbGlrZSB0byBhcHBseSBvbiB0aGVpciBib29raW5nIChpbnRlbnQub2ZmZXIpPC9saT48bGk+V2hhdCBjYXRlZ29yeSBvZiBzZXJ2aWNlcyB3b3VsZCB0aGV5IGxpa2UgdG8gYXZhaWwgKGludGVudC5jYXRlZ29yeSk8L2xpPjxsaT5XaGF0IGFkZGl0aW9uYWwgbHVnZ2FnZSBhcmUgdGhleSBjYXJyeWluZzwvbGk+PGxpPkhvdyB3b3VsZCB0aGV5IGxpa2UgdG8gcGF5IGZvciB0aGVpciBqb3VybmV5IChpbnRlbnQucGF5bWVudCk8L2xpPjwvdWw+PGJyPkZvciBleGFtcGxlLCBpbiBoZWFsdGggZG9tYWluLCBhIGNvbnN1bWVyIGRlY2xhcmVzIHRoZSBpbnRlbnQgZm9yIGEgbGFiIGJvb2tpbmcgdGhlIGRlc2NyaWJlcyB2YXJpb3VzIGFzcGVjdHMgb2YgdGhlaXIgYm9va2luZyBsaWtlLDx1bD48bGk+V2hlcmUgd291bGQgdGhleSBsaWtlIHRvIGdldCB0aGVpciBzY2FuL3Rlc3QgZG9uZSAoaW50ZW50LmZ1bGZpbGxtZW50LnN0YXJ0LmxvY2F0aW9uKTwvbGk+PGxpPldoZW4gd291bGQgdGhleSBsaWtlIHRvIGdldCB0aGVpciBzY2FuL3Rlc3QgZG9uZSAoaW50ZW50LmZ1bGZpbGxtZW50LnN0YXJ0LnRpbWUpPC9saT48bGk+V2hlbiB3b3VsZCB0aGV5IGxpa2UgdG8gZ2V0IHRoZSByZXN1bHRzIG9mIHRoZWlyIHRlc3Qvc2NhbiAoaW50ZW50LmZ1bGZpbGxtZW50LmVuZC50aW1lKTwvbGk+PGxpPldobyBpcyB0aGUgc2VydmljZSBwcm92aWRlciB0aGV5IHdvdWxkIGxpa2UgdG8gYXZhaWwgc2VydmljZXMgZnJvbSAoaW50ZW50LnByb3ZpZGVyKTwvbGk+PGxpPldobyBpcyBnZXR0aW5nIHRoZSB0ZXN0L3NjYW4gKGludGVudC5mdWxmaWxsbWVudC5jdXN0b21lcik8L2xpPjxsaT5XaGF0IGtpbmQgb2YgdGVzdC9zY2FuIHdvdWxkIHRoZXkgbGlrZSB0byBwdXJjaGFzZSAoaW50ZW50Lml0ZW0pPC9saT48bGk+V2hhdCBjYXRlZ29yeSBvZiBzZXJ2aWNlcyB3b3VsZCB0aGV5IGxpa2UgdG8gYXZhaWwgKGludGVudC5jYXRlZ29yeSk8L2xpPjxsaT5Ib3cgd291bGQgdGhleSBsaWtlIHRvIHBheSBmb3IgdGhlaXIgam91cm5leSAoaW50ZW50LnBheW1lbnQpPC9saT48L3VsPicKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgZGVzY3JpcHRvcjoKICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQSByYXcgZGVzY3JpcHRpb24gb2YgdGhlIHNlYXJjaCBpbnRlbnQuIEZyZWUgdGV4dCBzZWFyY2ggc3RyaW5ncywgcmF3IGF1ZGlvLCBldGMgY2FuIGJlIHNlbnQgaW4gdGhpcyBvYmplY3QuJwogICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgIC0gJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0Rlc2NyaXB0b3InCiAgICAgICAgcHJvdmlkZXI6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIHByb3ZpZGVyIGZyb20gd2hpY2ggdGhlIGN1c3RvbWVyIHdhbnRzIHRvIHBsYWNlIHRvIHRoZSBvcmRlciBmcm9tCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvUHJvdmlkZXInCiAgICAgICAgZnVsZmlsbG1lbnQ6CiAgICAgICAgICBkZXNjcmlwdGlvbjogRGV0YWlscyBvbiBob3cgdGhlIGN1c3RvbWVyIHdhbnRzIHRoZWlyIG9yZGVyIGZ1bGZpbGxlZAogICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgIC0gJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0Z1bGZpbGxtZW50JwogICAgICAgIHBheW1lbnQ6CiAgICAgICAgICBkZXNjcmlwdGlvbjogRGV0YWlscyBvbiBob3cgdGhlIGN1c3RvbWVyIHdhbnRzIHRvIHBheSBmb3IgdGhlIG9yZGVyCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvUGF5bWVudCcKICAgICAgICBjYXRlZ29yeToKICAgICAgICAgIGRlc2NyaXB0aW9uOiBEZXRhaWxzIG9uIHRoZSBpdGVtIGNhdGVnb3J5CiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvQ2F0ZWdvcnknCiAgICAgICAgb2ZmZXI6CiAgICAgICAgICBkZXNjcmlwdGlvbjogZGV0YWlscyBvbiB0aGUgb2ZmZXIgdGhlIGN1c3RvbWVyIHdhbnRzIHRvIGF2YWlsCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvT2ZmZXInCiAgICAgICAgaXRlbToKICAgICAgICAgIGRlc2NyaXB0aW9uOiBEZXRhaWxzIG9mIHRoZSBpdGVtIHRoYXQgdGhlIGNvbnN1bWVyIHdhbnRzIHRvIG9yZGVyCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvSXRlbScKICAgICAgICB0YWdzOgogICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvVGFnR3JvdXAnCiAgICBJdGVtUXVhbnRpdHk6CiAgICAgIGRlc2NyaXB0aW9uOiBEZXNjcmliZXMgdGhlIGNvdW50IG9yIGFtb3VudCBvZiBhbiBpdGVtCiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIGFsbG9jYXRlZDoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGlzIHJlcHJlc2VudHMgdGhlIGV4YWN0IHF1YW50aXR5IGFsbG9jYXRlZCBmb3IgcHVyY2hhc2Ugb2YgdGhlIGl0ZW0uCiAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgIGNvdW50OgogICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICBtaW5pbXVtOiAwCiAgICAgICAgICAgIG1lYXN1cmU6CiAgICAgICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1NjYWxhcicKICAgICAgICBhdmFpbGFibGU6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGhpcyByZXByZXNlbnRzIHRoZSBleGFjdCBxdWFudGl0eSBhdmFpbGFibGUgZm9yIHB1cmNoYXNlIG9mIHRoZSBpdGVtLiBUaGUgYnV5ZXIgY2FuIG9ubHkgcHVyY2hhc2UgbXVsdGlwbGVzIG9mIHRoaXMKICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgY291bnQ6CiAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgIG1pbmltdW06IDAKICAgICAgICAgICAgbWVhc3VyZToKICAgICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvU2NhbGFyJwogICAgICAgIG1heGltdW06CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGhpcyByZXByZXNlbnRzIHRoZSBtYXhpbXVtIHF1YW50aXR5IGFsbG93ZWQgZm9yIHB1cmNoYXNlIG9mIHRoZSBpdGVtCiAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgIGNvdW50OgogICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICBtaW5pbXVtOiAxCiAgICAgICAgICAgIG1lYXN1cmU6CiAgICAgICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1NjYWxhcicKICAgICAgICBtaW5pbXVtOgogICAgICAgICAgZGVzY3JpcHRpb246IFRoaXMgcmVwcmVzZW50cyB0aGUgbWluaW11bSBxdWFudGl0eSBhbGxvd2VkIGZvciBwdXJjaGFzZSBvZiB0aGUgaXRlbQogICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICBjb3VudDoKICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgbWluaW11bTogMAogICAgICAgICAgICBtZWFzdXJlOgogICAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9TY2FsYXInCiAgICAgICAgc2VsZWN0ZWQ6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGhpcyByZXByZXNlbnRzIHRoZSBxdWFudGl0eSBzZWxlY3RlZCBmb3IgcHVyY2hhc2Ugb2YgdGhlIGl0ZW0KICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgY291bnQ6CiAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgIG1pbmltdW06IDAKICAgICAgICAgICAgbWVhc3VyZToKICAgICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvU2NhbGFyJwogICAgICAgIHVuaXRpemVkOgogICAgICAgICAgZGVzY3JpcHRpb246IFRoaXMgcmVwcmVzZW50cyB0aGUgcXVhbnRpdHkgYXZhaWxhYmxlIGluIGEgc2luZ2xlIHVuaXQgb2YgdGhlIGl0ZW0KICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgY291bnQ6CiAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgIG1pbmltdW06IDEKICAgICAgICAgICAgICBtYXhpbXVtOiAxCiAgICAgICAgICAgIG1lYXN1cmU6CiAgICAgICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1NjYWxhcicKICAgIEl0ZW06CiAgICAgIGRlc2NyaXB0aW9uOiAnRGVzY3JpYmVzIGEgcHJvZHVjdCBvciBhIHNlcnZpY2Ugb2ZmZXJlZCB0byB0aGUgZW5kIGNvbnN1bWVyIGJ5IHRoZSBwcm92aWRlci4gSW4gdGhlIG1vYmlsaXR5IHNlY3RvciwgaXQgY2FuIHJlcHJlc2VudCBhIGZhcmUgcHJvZHVjdCBsaWtlIG9uZSB3YXkgam91cm5leS4gSW4gdGhlIGxvZ2lzdGljcyBzZWN0b3IsIGl0IGNhbiByZXByZXNlbnQgdGhlIGRlbGl2ZXJ5IHNlcnZpY2Ugb2ZmZXJpbmcuIEluIHRoZSByZXRhaWwgZG9tYWluIGl0IGNhbiByZXByZXNlbnQgYSBwcm9kdWN0IGxpa2UgYSBncm9jZXJ5IGl0ZW0uJwogICAgICB0eXBlOiBvYmplY3QKICAgICAgcHJvcGVydGllczoKICAgICAgICBpZDoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBJRCBvZiB0aGUgaXRlbS4KICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIHBhcmVudF9pdGVtX2lkOgogICAgICAgICAgZGVzY3JpcHRpb246ICdJRCBvZiB0aGUgaXRlbSwgdGhpcyBpdGVtIGlzIGEgdmFyaWFudCBvZicKICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9JdGVtL3Byb3BlcnRpZXMvaWQnCiAgICAgICAgcGFyZW50X2l0ZW1fcXVhbnRpdHk6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIG51bWJlciBvZiB1bml0cyBvZiB0aGUgcGFyZW50IGl0ZW0gdGhpcyBpdGVtIGlzIGEgbXVsdGlwbGUgb2YKICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9JdGVtUXVhbnRpdHknCiAgICAgICAgZGVzY3JpcHRvcjoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBQaHlzaWNhbCBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbQogICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgIC0gJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0Rlc2NyaXB0b3InCiAgICAgICAgY3JlYXRvcjoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgY3JlYXRvciBvZiB0aGlzIGl0ZW0KICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9Pcmdhbml6YXRpb24nCiAgICAgICAgcHJpY2U6CiAgICAgICAgICBkZXNjcmlwdGlvbjogJ1RoZSBwcmljZSBvZiB0aGlzIGl0ZW0sIGlmIGl0IGhhcyBpbnRyaW5zaWMgdmFsdWUnCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvUHJpY2UnCiAgICAgICAgcXVhbnRpdHk6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIHNlbGxpbmcgcXVhbnRpdHkgb2YgdGhlIGl0ZW0KICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9JdGVtUXVhbnRpdHknCiAgICAgICAgY2F0ZWdvcnlfaWRzOgogICAgICAgICAgZGVzY3JpcHRpb246IENhdGVnb3JpZXMgdGhpcyBpdGVtIGNhbiBiZSBsaXN0ZWQgdW5kZXIKICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvQ2F0ZWdvcnkvcHJvcGVydGllcy9pZCcKICAgICAgICBmdWxmaWxsbWVudF9pZHM6CiAgICAgICAgICBkZXNjcmlwdGlvbjogTW9kZXMgdGhyb3VnaCB3aGljaCB0aGlzIGl0ZW0gY2FuIGJlIGZ1bGZpbGxlZAogICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9GdWxmaWxsbWVudC9wcm9wZXJ0aWVzL2lkJwogICAgICAgIGxvY2F0aW9uX2lkczoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBQcm92aWRlciBMb2NhdGlvbnMgdGhpcyBpdGVtIGlzIGF2YWlsYWJsZSBpbgogICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9Mb2NhdGlvbi9wcm9wZXJ0aWVzL2lkJwogICAgICAgIHBheW1lbnRfaWRzOgogICAgICAgICAgZGVzY3JpcHRpb246IFBheW1lbnQgbW9kYWxpdGllcyB0aHJvdWdoIHdoaWNoIHRoaXMgaXRlbSBjYW4gYmUgb3JkZXJlZAogICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9QYXltZW50L3Byb3BlcnRpZXMvaWQnCiAgICAgICAgYWRkX29uczoKICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0FkZE9uJwogICAgICAgIGNhbmNlbGxhdGlvbl90ZXJtczoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBDYW5jZWxsYXRpb24gdGVybXMgb2YgdGhpcyBpdGVtCiAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9DYW5jZWxsYXRpb25UZXJtJwogICAgICAgIHJlZnVuZF90ZXJtczoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBSZWZ1bmQgdGVybXMgb2YgdGhpcyBpdGVtCiAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBSZWZ1bmQgdGVybSBvZiBhbiBpdGVtIG9yIGFuIG9yZGVyCiAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgIGZ1bGZpbGxtZW50X3N0YXRlOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBzdGF0ZSBvZiBmdWxmaWxsbWVudCBkdXJpbmcgd2hpY2ggdGhpcyB0ZXJtIGlzIGFwcGxpY2FibGUuCiAgICAgICAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvU3RhdGUnCiAgICAgICAgICAgICAgcmVmdW5kX2VsaWdpYmxlOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEluZGljYXRlcyBpZiBjYW5jZWxsYXRpb24gd2lsbCByZXN1bHQgaW4gYSByZWZ1bmQKICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICByZWZ1bmRfd2l0aGluOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFRpbWUgd2l0aGluIHdoaWNoIHJlZnVuZCB3aWxsIGJlIHByb2Nlc3NlZCBhZnRlciBzdWNjZXNzZnVsIGNhbmNlbGxhdGlvbi4KICAgICAgICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9UaW1lJwogICAgICAgICAgICAgIHJlZnVuZF9hbW91bnQ6CiAgICAgICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvUHJpY2UnCiAgICAgICAgcmVwbGFjZW1lbnRfdGVybXM6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGVybXMgdGhhdCBhcmUgYXBwbGljYWJsZSBiZSBtZXQgd2hlbiB0aGlzIGl0ZW0gaXMgcmVwbGFjZWQKICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1JlcGxhY2VtZW50VGVybScKICAgICAgICByZXR1cm5fdGVybXM6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGVybXMgdGhhdCBhcmUgYXBwbGljYWJsZSB3aGVuIHRoaXMgaXRlbSBpcyByZXR1cm5lZAogICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvUmV0dXJuVGVybScKICAgICAgICB4aW5wdXQ6CiAgICAgICAgICBkZXNjcmlwdGlvbjogQWRkaXRpb25hbCBpbnB1dCByZXF1aXJlZCBmcm9tIHRoZSBjdXN0b21lciB0byBwdXJjaGFzZSAvIGF2YWlsIHRoaXMgaXRlbQogICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgIC0gJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1hJbnB1dCcKICAgICAgICB0aW1lOgogICAgICAgICAgZGVzY3JpcHRpb246IFRlbXBvcmFsIGF0dHJpYnV0ZXMgb2YgdGhpcyBpdGVtLiBUaGlzIHByb3BlcnR5IGlzIHVzZWQgd2hlbiB0aGUgaXRlbSBleGlzdHMgb24gdGhlIGNhdGFsb2cgb25seSBmb3IgYSBsaW1pdGVkIHBlcmlvZCBvZiB0aW1lLgogICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgIC0gJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1RpbWUnCiAgICAgICAgcmF0ZWFibGU6CiAgICAgICAgICBkZXNjcmlwdGlvbjogV2hldGhlciB0aGlzIGl0ZW0gY2FuIGJlIHJhdGVkCiAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgcmF0aW5nOgogICAgICAgICAgZGVzY3JpcHRpb246IFRoZSByYXRpbmcgb2YgdGhlIGl0ZW0KICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9SYXRpbmcvcHJvcGVydGllcy92YWx1ZScKICAgICAgICBtYXRjaGVkOgogICAgICAgICAgZGVzY3JpcHRpb246IFdoZXRoZXIgdGhpcyBpdGVtIGlzIGFuIGV4YWN0IG1hdGNoIG9mIHRoZSByZXF1ZXN0CiAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgcmVsYXRlZDoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBXaGV0aGVyIHRoaXMgaXRlbSBpcyBhIHJlbGF0ZWQgaXRlbSB0byB0aGUgZXhhY3RseSBtYXRjaGVkIGl0ZW0KICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICByZWNvbW1lbmRlZDoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBXaGV0aGVyIHRoaXMgaXRlbSBpcyBhIHJlY29tbWVuZGVkIGl0ZW0gdG8gYSByZXNwb25zZQogICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgIHR0bDoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaW1lIHRvIGxpdmUgaW4gc2Vjb25kcyBmb3IgYW4gaW5zdGFuY2Ugb2YgdGhpcyBzY2hlbWEKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIHRhZ3M6CiAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9UYWdHcm91cCcKICAgIExvY2F0aW9uOgogICAgICBkZXNjcmlwdGlvbjogVGhlIHBoeXNpY2FsIGxvY2F0aW9uIG9mIHNvbWV0aGluZwogICAgICB0eXBlOiBvYmplY3QKICAgICAgcHJvcGVydGllczoKICAgICAgICBpZDoKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIGRlc2NyaXB0b3I6CiAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvRGVzY3JpcHRvcicKICAgICAgICBtYXBfdXJsOgogICAgICAgICAgZGVzY3JpcHRpb246IFRoZSB1cmwgdG8gdGhlIG1hcCBvZiB0aGUgbG9jYXRpb24uIFRoaXMgY2FuIGJlIGEgZ2xvYmFsbHkgcmVjb2duaXplZCBtYXAgdXJsIG9yIHRoZSBvbmUgc3BlY2lmaWVkIGJ5IHRoZSBuZXR3b3JrIHBvbGljeS4KICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZm9ybWF0OiB1cmkKICAgICAgICBncHM6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIEdQUyBjby1vcmRpbmF0ZXMgb2YgdGhpcyBsb2NhdGlvbi4KICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9HcHMnCiAgICAgICAgYWRkcmVzczoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgYWRkcmVzcyBvZiB0aGlzIGxvY2F0aW9uLgogICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgIC0gJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0FkZHJlc3MnCiAgICAgICAgY2l0eToKICAgICAgICAgIGRlc2NyaXB0aW9uOiAnVGhlIGNpdHkgdGhpcyBsb2NhdGlvbiBpcywgb3IgaXMgbG9jYXRlZCB3aXRoaW4nCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvQ2l0eScKICAgICAgICBkaXN0cmljdDoKICAgICAgICAgIGRlc2NyaXB0aW9uOiAnVGhlIHN0YXRlIHRoaXMgbG9jYXRpb24gaXMsIG9yIGlzIGxvY2F0ZWQgd2l0aGluJwogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgc3RhdGU6CiAgICAgICAgICBkZXNjcmlwdGlvbjogJ1RoZSBzdGF0ZSB0aGlzIGxvY2F0aW9uIGlzLCBvciBpcyBsb2NhdGVkIHdpdGhpbicKICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9TdGF0ZScKICAgICAgICBjb3VudHJ5OgogICAgICAgICAgZGVzY3JpcHRpb246ICdUaGUgY291bnRyeSB0aGlzIGxvY2F0aW9uIGlzLCBvciBpcyBsb2NhdGVkIHdpdGhpbicKICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9Db3VudHJ5JwogICAgICAgIGFyZWFfY29kZToKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIGNpcmNsZToKICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9DaXJjbGUnCiAgICAgICAgcG9seWdvbjoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgYm91bmRhcnkgcG9seWdvbiBvZiB0aGlzIGxvY2F0aW9uCiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAzZHNwYWNlOgogICAgICAgICAgZGVzY3JpcHRpb246IFRoZSB0aHJlZSBkaW1lbnNpb25hbCByZWdpb24gZGVzY3JpYmluZyB0aGlzIGxvY2F0aW9uCiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICByYXRpbmc6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIHJhdGluZyBvZiB0aGlzIGxvY2F0aW9uCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvUmF0aW5nL3Byb3BlcnRpZXMvdmFsdWUnCiAgICBNZWRpYUZpbGU6CiAgICAgIGRlc2NyaXB0aW9uOiBUaGlzIG9iamVjdCBjb250YWlucyBhIHVybCB0byBhIG1lZGlhIGZpbGUuCiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIG1pbWV0eXBlOgogICAgICAgICAgZGVzY3JpcHRpb246ICdpbmRpY2F0ZXMgdGhlIG5hdHVyZSBhbmQgZm9ybWF0IG9mIHRoZSBkb2N1bWVudCwgZmlsZSwgb3IgYXNzb3J0bWVudCBvZiBieXRlcy4gTUlNRSB0eXBlcyBhcmUgZGVmaW5lZCBhbmQgc3RhbmRhcmRpemVkIGluIElFVEYnJ3MgUkZDIDY4MzgnCiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICB1cmw6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIFVSTCBvZiB0aGUgZmlsZQogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBmb3JtYXQ6IHVyaQogICAgICAgIHNpZ25hdHVyZToKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgZGlnaXRhbCBzaWduYXR1cmUgb2YgdGhlIGZpbGUgc2lnbmVkIGJ5IHRoZSBzZW5kZXIKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIGRzYToKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgc2lnbmluZyBhbGdvcml0aG0gdXNlZCBieSB0aGUgc2VuZGVyCiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgIE9mZmVyOgogICAgICBkZXNjcmlwdGlvbjogQW4gb2ZmZXIgYXNzb2NpYXRlZCB3aXRoIGEgY2F0YWxvZy4gVGhpcyBpcyB0eXBpY2FsbHkgdXNlZCB0byBwcm9tb3RlIGEgcGFydGljdWxhciBwcm9kdWN0IGFuZCBlbmFibGUgbW9yZSBwdXJjaGFzZXMuCiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIGlkOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgZGVzY3JpcHRvcjoKICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9EZXNjcmlwdG9yJwogICAgICAgIGxvY2F0aW9uX2lkczoKICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0xvY2F0aW9uL3Byb3BlcnRpZXMvaWQnCiAgICAgICAgY2F0ZWdvcnlfaWRzOgogICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvQ2F0ZWdvcnkvcHJvcGVydGllcy9pZCcKICAgICAgICBpdGVtX2lkczoKICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0l0ZW0vcHJvcGVydGllcy9pZCcKICAgICAgICB0aW1lOgogICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1RpbWUnCiAgICAgICAgdGFnczoKICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1RhZ0dyb3VwJwogICAgT3B0aW9uOgogICAgICBkZXNjcmlwdGlvbjogRGVzY3JpYmVzIGEgc2VsZWN0YWJsZSBvcHRpb24KICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgaWQ6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICBkZXNjcmlwdG9yOgogICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0Rlc2NyaXB0b3InCiAgICBPcmRlcjoKICAgICAgZGVzY3JpcHRpb246IERlc2NyaWJlcyBhIGxlZ2FsIHB1cmNoYXNlIG9yZGVyLiBJdCBjb250YWlucyB0aGUgY29tcGxldGUgZGV0YWlscyBvZiB0aGUgbGVnYWwgY29udHJhY3QgY3JlYXRlZCBiZXR3ZWVuIHRoZSBidXllciBhbmQgdGhlIHNlbGxlci4KICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgaWQ6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGRlc2NyaXB0aW9uOiBIdW1hbi1yZWFkYWJsZSBJRCBvZiB0aGUgb3JkZXIuIFRoaXMgaXMgZ2VuZXJhdGVkIGF0IHRoZSBCUFAgbGF5ZXIuIFRoZSBCUFAgY2FuIGVpdGhlciBnZW5lcmF0ZSBvcmRlciBpZCB3aXRoaW4gaXRzIHN5c3RlbSBvciBmb3J3YXJkIHRoZSBvcmRlciBJRCBjcmVhdGVkIGF0IHRoZSBwcm92aWRlciBsZXZlbC4KICAgICAgICByZWZfb3JkZXJfaWRzOgogICAgICAgICAgZGVzY3JpcHRpb246IEEgbGlzdCBvZiBvcmRlciBJRHMgdG8gbGluayB0aGlzIG9yZGVyIHRvIHByZXZpb3VzIG9yZGVycy4KICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBJRCBvZiBhIHByZXZpb3VzIG9yZGVyCiAgICAgICAgc3RhdHVzOgogICAgICAgICAgZGVzY3JpcHRpb246IFN0YXR1cyBvZiB0aGUgb3JkZXIuIEFsbG93ZWQgdmFsdWVzIGNhbiBiZSBkZWZpbmVkIGJ5IHRoZSBuZXR3b3JrIHBvbGljeQogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBlbnVtOgogICAgICAgICAgICAtIEFDVElWRQogICAgICAgICAgICAtIENPTVBMRVRFCiAgICAgICAgICAgIC0gQ0FOQ0VMTEVECiAgICAgICAgdHlwZToKICAgICAgICAgIGRlc2NyaXB0aW9uOiAnVGhpcyBpcyB1c2VkIHRvIGluZGljYXRlIHRoZSB0eXBlIG9mIG9yZGVyIGJlaW5nIGNyZWF0ZWQgdG8gQlBQcy4gU29tZXRpbWVzIG9yZGVycyBjYW4gYmUgbGlua2VkIHRvIHByZXZpb3VzIG9yZGVycywgbGlrZSBhIHJlcGxhY2VtZW50IG9yZGVyIGluIGEgcmV0YWlsIGRvbWFpbi4gQSBmb2xsb3ctdXAgY29uc3VsdGF0aW9uIGluIGhlYWx0aGNhcmUgZG9tYWluLiBBIHNpbmdsZSBvcmRlciBwYXJ0IG9mIGEgc3Vic2NyaXB0aW9uIG9yZGVyLiBUaGUgbGlzdCBvZiBvcmRlciB0eXBlcyBjYW4gYmUgc3RhbmRhcmRpemVkIGF0IHRoZSBuZXR3b3JrIGxldmVsLicKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZGVmYXVsdDogREVGQVVMVAogICAgICAgICAgZW51bToKICAgICAgICAgICAgLSBEUkFGVAogICAgICAgICAgICAtIERFRkFVTFQKICAgICAgICBwcm92aWRlcjoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBEZXRhaWxzIG9mIHRoZSBwcm92aWRlciB3aG9zZSBjYXRhbG9nIGl0ZW1zIGhhdmUgYmVlbiBzZWxlY3RlZC4KICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9Qcm92aWRlcicKICAgICAgICBpdGVtczoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgaXRlbXMgcHVyY2hhc2VkIC8gYXZhaWxlZCBpbiB0aGlzIG9yZGVyCiAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9JdGVtJwogICAgICAgIGFkZF9vbnM6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIGFkZC1vbnMgcHVyY2hhc2VkIC8gYXZhaWxlZCBpbiB0aGlzIG9yZGVyCiAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9BZGRPbicKICAgICAgICBvZmZlcnM6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIG9mZmVycyBhcHBsaWVkIGluIHRoaXMgb3JkZXIKICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL09mZmVyJwogICAgICAgIGJpbGxpbmc6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIGJpbGxpbmcgZGV0YWlscyBvZiB0aGlzIG9yZGVyCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvQmlsbGluZycKICAgICAgICBmdWxmaWxsbWVudHM6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIGZ1bGZpbGxtZW50cyBpbnZvbHZlZCBpbiBjb21wbGV0aW5nIHRoaXMgb3JkZXIKICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0Z1bGZpbGxtZW50JwogICAgICAgIGNhbmNlbGxhdGlvbjoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgY2FuY2VsbGF0aW9uIGRldGFpbHMgb2YgdGhpcyBvcmRlcgogICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgIC0gJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0NhbmNlbGxhdGlvbicKICAgICAgICBjYW5jZWxsYXRpb25fdGVybXM6CiAgICAgICAgICBkZXNjcmlwdGlvbjogQ2FuY2VsbGF0aW9uIHRlcm1zIG9mIHRoaXMgaXRlbQogICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvQ2FuY2VsbGF0aW9uVGVybScKICAgICAgICByZWZ1bmRfdGVybXM6CiAgICAgICAgICBkZXNjcmlwdGlvbjogUmVmdW5kIHRlcm1zIG9mIHRoaXMgaXRlbQogICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvSXRlbS9wcm9wZXJ0aWVzL3JlZnVuZF90ZXJtcy9pdGVtcycKICAgICAgICByZXBsYWNlbWVudF90ZXJtczoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBSZXBsYWNlbWVudCB0ZXJtcyBvZiB0aGlzIGl0ZW0KICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1JlcGxhY2VtZW50VGVybScKICAgICAgICByZXR1cm5fdGVybXM6CiAgICAgICAgICBkZXNjcmlwdGlvbjogUmV0dXJuIHRlcm1zIG9mIHRoaXMgaXRlbQogICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvUmV0dXJuVGVybScKICAgICAgICBxdW90ZToKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgbXV0dWFsbHkgYWdyZWVkIHVwb24gcXVvdGF0aW9uIGZvciB0aGlzIG9yZGVyLgogICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgIC0gJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1F1b3RhdGlvbicKICAgICAgICBwYXltZW50czoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgdGVybXMgb2Ygc2V0dGxlbWVudCBmb3IgdGhpcyBvcmRlcgogICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvUGF5bWVudCcKICAgICAgICBjcmVhdGVkX2F0OgogICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBkYXRlLXRpbWUgb2YgY3JlYXRpb24gb2YgdGhpcyBvcmRlcgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBmb3JtYXQ6IGRhdGUtdGltZQogICAgICAgIHVwZGF0ZWRfYXQ6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIGRhdGUtdGltZSBvZiB1cGRhdGVkIG9mIHRoaXMgb3JkZXIKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZm9ybWF0OiBkYXRlLXRpbWUKICAgICAgICB4aW5wdXQ6CiAgICAgICAgICBkZXNjcmlwdGlvbjogQWRkaXRpb25hbCBpbnB1dCByZXF1aXJlZCBmcm9tIHRoZSBjdXN0b21lciB0byBjb25maXJtIHRoaXMgb3JkZXIKICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9YSW5wdXQnCiAgICAgICAgdGFnczoKICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1RhZ0dyb3VwJwogICAgT3JnYW5pemF0aW9uOgogICAgICBkZXNjcmlwdGlvbjogQW4gb3JnYW5pemF0aW9uLiBVc3VhbGx5IGEgcmVjb2duaXplZCBidXNpbmVzcyBlbnRpdHkuCiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIGRlc2NyaXB0b3I6CiAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvRGVzY3JpcHRvcicKICAgICAgICBhZGRyZXNzOgogICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBwb3N0YWwgYWRkcmVzcyBvZiB0aGUgb3JnYW5pemF0aW9uCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvQWRkcmVzcycKICAgICAgICBzdGF0ZToKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgc3RhdGUgd2hlcmUgdGhlIG9yZ2FuaXphdGlvbidzIGFkZHJlc3MgaXMgcmVnaXN0ZXJlZAogICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgIC0gJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1N0YXRlJwogICAgICAgIGNpdHk6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIGNpdHkgd2hlcmUgdGhlIHRoZSBvcmdhbml6YXRpb24ncyBhZGRyZXNzIGlzIHJlZ2lzdGVyZWQKICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9DaXR5JwogICAgICAgIGNvbnRhY3Q6CiAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvQ29udGFjdCcKICAgIFBheW1lbnQ6CiAgICAgIGRlc2NyaXB0aW9uOiAnRGVzY3JpYmVzIHRoZSB0ZXJtcyBvZiBzZXR0bGVtZW50IGJldHdlZW4gdGhlIEJBUCBhbmQgdGhlIEJQUCBmb3IgYSBzaW5nbGUgdHJhbnNhY3Rpb24uIFdoZW4gaW5zdGFudGlhdGVkLCB0aGlzIG9iamVjdCBjb250YWlucyA8b2w+PGxpPnRoZSBhbW91bnQgdGhhdCBoYXMgdG8gYmUgc2V0dGxlZCw8L2xpPjxsaT5UaGUgcGF5bWVudCBkZXN0aW5hdGlvbiBkZXN0aW5hdGlvbiBkZXRhaWxzPC9saT48bGk+V2hlbiB0aGUgc2V0dGxlbWVudCBzaG91bGQgaGFwcGVuLCBhbmQ8L2xpPjxsaT5BIHRyYW5zYWN0aW9uIHJlZmVyZW5jZSBJRDwvbGk+PC9vbD4uIER1cmluZyBhIHRyYW5zYWN0aW9uLCB0aGUgQlBQIHJlc2VydmVzIHRoZSByaWdodCB0byBkZWNpZGUgdGhlIHRlcm1zIG9mIHBheW1lbnQuIEhvd2V2ZXIsIHRoZSBCQVAgY2FuIHNlbmQgaXRzIHRlcm1zIHRvIHRoZSBCUFAgZmlyc3QuIElmIHRoZSBCUFAgZG9lcyBub3QgYWdyZWUgdG8gdGhvc2UgdGVybXMsIGl0IG11c3Qgb3ZlcndyaXRlIHRoZSB0ZXJtcyBhbmQgcmV0dXJuIHRoZW0gdG8gdGhlIEJBUC4gSWYgb3ZlcnJpZGRlbiwgdGhlIEJBUCBtdXN0IGVpdGhlciBhZ3JlZSB0byB0aGUgdGVybXMgc2VudCBieSB0aGUgQlBQIGluIG9yZGVyIHRvIHByZXNlcnZlIHRoZSBwcm92aWRlcicncyBhdXRvbm9teSwgb3IgYWJvcnQgdGhlIHRyYW5zYWN0aW9uLiBJbiBjYXNlIG9mIHN1Y2ggZGlzYWdyZWVtZW50cywgdGhlIEJBUCBhbmQgdGhlIEJQUCBjYW4gcGVyZm9ybSBvZmZsaW5lIG5lZ290aWF0aW9ucyBvbiB0aGUgcGF5bWVudCB0ZXJtcy4gT25jZSBhbiBhZ3JlZW1lbnQgaXMgcmVhY2hlZCwgdGhlIEJBUCBhbmQgQlBQIGNhbiByZXN1bWUgdHJhbnNhY3Rpb25zLicKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgaWQ6CiAgICAgICAgICBkZXNjcmlwdGlvbjogSUQgb2YgdGhlIHBheW1lbnQgdGVybSB0aGF0IGNhbiBiZSByZWZlcnJlZCBhdCBhbiBpdGVtIG9yIGFuIG9yZGVyIGxldmVsIGluIGEgY2F0YWxvZwogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgY29sbGVjdGVkX2J5OgogICAgICAgICAgZGVzY3JpcHRpb246ICdUaGlzIGZpZWxkIGluZGljYXRlcyB3aG8gaXMgdGhlIGNvbGxlY3RvciBvZiBwYXltZW50LiBUaGUgQkFQIGNhbiBzZXQgdGhpcyB2YWx1ZSB0byAnJ2JhcCcnIGlmIGl0IHdhbnRzIHRvIGNvbGxlY3QgdGhlIHBheW1lbnQgZmlyc3QgYW5kICBzZXR0bGUgaXQgdG8gdGhlIEJQUC4gSWYgdGhlIEJQUCBhZ3JlZXMgdG8gdGhvc2UgdGVybXMsIHRoZSBCUFAgc2hvdWxkIG5vdCBzZW5kIHRoZSBwYXltZW50IHVybC4gQWx0ZXJuYXRpdmVseSwgdGhlIEJQUCBjYW4gc2V0IHRoaXMgZmllbGQgd2l0aCB0aGUgdmFsdWUgJydicHAnJyBpZiBpdCB3YW50cyB0aGUgcGF5bWVudCB0byBiZSBtYWRlIGRpcmVjdGx5LicKICAgICAgICB1cmw6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQSBwYXltZW50IHVybCB0byBiZSBjYWxsZWQgYnkgdGhlIEJBUC4gSWYgZW1wdHksIHRoZW4gdGhlIHBheW1lbnQgaXMgdG8gYmUgZG9uZSBvZmZsaW5lLiBUaGUgZGV0YWlscyBvZiBwYXltZW50IHNob3VsZCBiZSBwcmVzZW50IGluIHRoZSBwYXJhbXMgb2JqZWN0LiBJZiB0bF9tZXRob2QgPSBodHRwL2dldCwgdGhlbiB0aGUgcGF5bWVudCBkZXRhaWxzIHdpbGwgYmUgc2VudCBhcyB1cmwgcGFyYW1zLiBUd28gdXJsIHBhcmFtIHZhbHVlcywgYGBgJHRyYW5zYWN0aW9uX2lkYGBgIGFuZCBgYGAkYW1vdW50YGBgIGFyZSBtYW5kYXRvcnkuJwogICAgICAgICAgZm9ybWF0OiB1cmkKICAgICAgICBwYXJhbXM6CiAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgIHRyYW5zYWN0aW9uX2lkOgogICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgcmVmZXJlbmNlIHRyYW5zYWN0aW9uIElEIGFzc29jaWF0ZWQgd2l0aCBhIHBheW1lbnQgYWN0aXZpdHkKICAgICAgICAgICAgYW1vdW50OgogICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICBjdXJyZW5jeToKICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgYmFua19jb2RlOgogICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICBiYW5rX2FjY291bnRfbnVtYmVyOgogICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICB2aXJ0dWFsX3BheW1lbnRfYWRkcmVzczoKICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgc291cmNlX2JhbmtfY29kZToKICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgc291cmNlX2JhbmtfYWNjb3VudF9udW1iZXI6CiAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgIHNvdXJjZV92aXJ0dWFsX3BheW1lbnRfYWRkcmVzczoKICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICB0eXBlOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBlbnVtOgogICAgICAgICAgICAtIFBSRS1PUkRFUgogICAgICAgICAgICAtIFBSRS1GVUxGSUxMTUVOVAogICAgICAgICAgICAtIE9OLUZVTEZJTExNRU5UCiAgICAgICAgICAgIC0gUE9TVC1GVUxGSUxMTUVOVAogICAgICAgIHN0YXR1czoKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZW51bToKICAgICAgICAgICAgLSBQQUlECiAgICAgICAgICAgIC0gTk9ULVBBSUQKICAgICAgICB0aW1lOgogICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1RpbWUnCiAgICAgICAgdGFnczoKICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1RhZ0dyb3VwJwogICAgUGVyc29uOgogICAgICBkZXNjcmlwdGlvbjogRGVzY3JpYmVzIGEgcGVyc29uIGFzIGFueSBpbmRpdmlkdWFsCiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIGlkOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBkZXNjcmlwdGlvbjogRGVzY3JpYmVzIHRoZSBpZGVudGl0eSBvZiB0aGUgcGVyc29uCiAgICAgICAgdXJsOgogICAgICAgICAgZGVzY3JpcHRpb246IFByb2ZpbGUgdXJsIG9mIHRoZSBwZXJzb24KICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZm9ybWF0OiB1cmkKICAgICAgICBuYW1lOgogICAgICAgICAgZGVzY3JpcHRpb246IHRoZSBuYW1lIG9mIHRoZSBwZXJzb24KICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIGltYWdlOgogICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0ltYWdlJwogICAgICAgIGFnZToKICAgICAgICAgIGRlc2NyaXB0aW9uOiBBZ2Ugb2YgdGhlIHBlcnNvbgogICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgIC0gJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0R1cmF0aW9uJwogICAgICAgIGRvYjoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBEYXRlIG9mIGJpcnRoIG9mIHRoZSBwZXJzb24KICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZm9ybWF0OiBkYXRlCiAgICAgICAgZ2VuZGVyOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0dlbmRlciBvZiBzb21ldGhpbmcsIHR5cGljYWxseSBhIFBlcnNvbiwgYnV0IHBvc3NpYmx5IGFsc28gZmljdGlvbmFsIGNoYXJhY3RlcnMsIGFuaW1hbHMsIGV0Yy4gV2hpbGUgTWFsZSBhbmQgRmVtYWxlIG1heSBiZSB1c2VkLCB0ZXh0IHN0cmluZ3MgYXJlIGFsc28gYWNjZXB0YWJsZSBmb3IgcGVvcGxlIHdobyBkbyBub3QgaWRlbnRpZnkgYXMgYSBiaW5hcnkgZ2VuZGVyLkFsbG93ZWQgdmFsdWVzIGZvciB0aGlzIGZpZWxkIGNhbiBiZSBwdWJsaXNoZWQgaW4gdGhlIG5ldHdvcmsgcG9saWN5JwogICAgICAgIGNyZWRzOgogICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvQ3JlZGVudGlhbCcKICAgICAgICBsYW5ndWFnZXM6CiAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBEZXNjcmliZXMgYSBsYW5ndWFnZSBrbm93biB0byB0aGUgcGVyc29uLgogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICBjb2RlOgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgbmFtZToKICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIHNraWxsczoKICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgZGVzY3JpcHRpb246IERlc2NyaWJlcyBhIHNraWxsIG9mIHRoZSBwZXJzb24uCiAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgIGNvZGU6CiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBuYW1lOgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgdGFnczoKICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1RhZ0dyb3VwJwogICAgUHJpY2U6CiAgICAgIGRlc2NyaXB0aW9uOiBEZXNjcmliZXMgdGhlIHByaWNlIG9mIGEgcHJvZHVjdCBvciBzZXJ2aWNlCiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIGN1cnJlbmN5OgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgdmFsdWU6CiAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvRGVjaW1hbFZhbHVlJwogICAgICAgIGVzdGltYXRlZF92YWx1ZToKICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9EZWNpbWFsVmFsdWUnCiAgICAgICAgY29tcHV0ZWRfdmFsdWU6CiAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvRGVjaW1hbFZhbHVlJwogICAgICAgIGxpc3RlZF92YWx1ZToKICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9EZWNpbWFsVmFsdWUnCiAgICAgICAgb2ZmZXJlZF92YWx1ZToKICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9EZWNpbWFsVmFsdWUnCiAgICAgICAgbWluaW11bV92YWx1ZToKICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9EZWNpbWFsVmFsdWUnCiAgICAgICAgbWF4aW11bV92YWx1ZToKICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9EZWNpbWFsVmFsdWUnCiAgICBQcm92aWRlcjoKICAgICAgZGVzY3JpcHRpb246IERlc2NyaWJlcyB0aGUgY2F0YWxvZyBvZiBhIGJ1c2luZXNzLgogICAgICB0eXBlOiBvYmplY3QKICAgICAgcHJvcGVydGllczoKICAgICAgICBpZDoKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZGVzY3JpcHRpb246IElkIG9mIHRoZSBwcm92aWRlcgogICAgICAgIGRlc2NyaXB0b3I6CiAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvRGVzY3JpcHRvcicKICAgICAgICBjYXRlZ29yeV9pZDoKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZGVzY3JpcHRpb246IENhdGVnb3J5IElkIG9mIHRoZSBwcm92aWRlciBhdCB0aGUgQlBQLWxldmVsIGNhdGFsb2cKICAgICAgICByYXRpbmc6CiAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvUmF0aW5nL3Byb3BlcnRpZXMvdmFsdWUnCiAgICAgICAgdGltZToKICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9UaW1lJwogICAgICAgIGNhdGVnb3JpZXM6CiAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9DYXRlZ29yeScKICAgICAgICBmdWxmaWxsbWVudHM6CiAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9GdWxmaWxsbWVudCcKICAgICAgICBwYXltZW50czoKICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1BheW1lbnQnCiAgICAgICAgbG9jYXRpb25zOgogICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvTG9jYXRpb24nCiAgICAgICAgb2ZmZXJzOgogICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvT2ZmZXInCiAgICAgICAgaXRlbXM6CiAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9JdGVtJwogICAgICAgIGV4cDoKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZGVzY3JpcHRpb246IFRpbWUgYWZ0ZXIgd2hpY2ggY2F0YWxvZyBoYXMgdG8gYmUgcmVmcmVzaGVkCiAgICAgICAgICBmb3JtYXQ6IGRhdGUtdGltZQogICAgICAgIHJhdGVhYmxlOgogICAgICAgICAgZGVzY3JpcHRpb246IFdoZXRoZXIgdGhpcyBwcm92aWRlciBjYW4gYmUgcmF0ZWQgb3Igbm90CiAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgdHRsOgogICAgICAgICAgZGVzY3JpcHRpb246ICdUaGUgdGltZS10by1saXZlIGluIHNlY29uZHMsIGZvciB0aGlzIG9iamVjdC4gVGhpcyBjYW4gYmUgb3ZlcnJpZGVuIGF0IGRlZXBlciBsZXZlbHMuIEEgdmFsdWUgb2YgLTEgaW5kaWNhdGVzIHRoYXQgdGhpcyBvYmplY3QgaXMgbm90IGNhY2hlYWJsZS4nCiAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICBtaW5pbXVtOiAtMQogICAgICAgIHRhZ3M6CiAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9UYWdHcm91cCcKICAgIFF1b3RhdGlvbjoKICAgICAgZGVzY3JpcHRpb246ICdEZXNjcmliZXMgYSBxdW90ZS4gSXQgaXMgdGhlIGVzdGltYXRlZCBwcmljZSBvZiBwcm9kdWN0cyBvciBzZXJ2aWNlcyBmcm9tIHRoZSBCUFAuPGJyPlRoaXMgaGFzIHByb3BlcnRpZXMgbGlrZSBwcmljZSwgYnJlYWt1cCwgdHRsJwogICAgICB0eXBlOiBvYmplY3QKICAgICAgcHJvcGVydGllczoKICAgICAgICBpZDoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBJRCBvZiB0aGUgcXVvdGUuCiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGZvcm1hdDogdXVpZAogICAgICAgIHByaWNlOgogICAgICAgICAgZGVzY3JpcHRpb246IFRoZSB0b3RhbCBxdW90ZWQgcHJpY2UKICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9QcmljZScKICAgICAgICBicmVha3VwOgogICAgICAgICAgZGVzY3JpcHRpb246IHRoZSBicmVha3VwIG9mIHRoZSB0b3RhbCBxdW90ZWQgcHJpY2UKICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgaXRlbToKICAgICAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9JdGVtJwogICAgICAgICAgICAgIHRpdGxlOgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgcHJpY2U6CiAgICAgICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvUHJpY2UnCiAgICAgICAgdHRsOgogICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0R1cmF0aW9uJwogICAgUmF0aW5nOgogICAgICBkZXNjcmlwdGlvbjogRGVzY3JpYmVzIHRoZSByYXRpbmcgb2YgYW4gZW50aXR5CiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIHJhdGluZ19jYXRlZ29yeToKICAgICAgICAgIGRlc2NyaXB0aW9uOiBDYXRlZ29yeSBvZiB0aGUgZW50aXR5IGJlaW5nIHJhdGVkCiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGVudW06CiAgICAgICAgICAgIC0gSXRlbQogICAgICAgICAgICAtIE9yZGVyCiAgICAgICAgICAgIC0gRnVsZmlsbG1lbnQKICAgICAgICAgICAgLSBQcm92aWRlcgogICAgICAgICAgICAtIEFnZW50CiAgICAgICAgICAgIC0gU3VwcG9ydAogICAgICAgIGlkOgogICAgICAgICAgZGVzY3JpcHRpb246IElkIG9mIHRoZSBvYmplY3QgYmVpbmcgcmF0ZWQKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIHZhbHVlOgogICAgICAgICAgZGVzY3JpcHRpb246ICdSYXRpbmcgdmFsdWUgZ2l2ZW4gdG8gdGhlIG9iamVjdC4gVGhpcyBjYW4gYmUgYSBzaW5nbGUgdmFsdWUgb3IgY2FuIGFsc28gY29udGFpbiBhbiBpbmVxdWFsaXR5IG9wZXJhdG9yIGxpa2UgZ3QsIGd0ZSwgbHQsIGx0ZS4gVGhpcyBjYW4gYWxzbyBjb250YWluIGFuIGluZXF1YWxpdHkgZXhwcmVzc2lvbiBjb250YWluaW5nIGxvZ2ljYWwgb3BlcmF0b3JzIGxpa2UgJiYgYW5kIHx8LicKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgUmVnaW9uOgogICAgICBkZXNjcmlwdGlvbjogRGVzY3JpYmVzIGFuIGFyYml0cmFyeSByZWdpb24gb2Ygc3BhY2UuIFRoZSBuZXR3b3JrIHBvbGljeSBzaG91bGQgY29udGFpbiBhIHB1Ymxpc2hlZCBsaXN0IG9mIHN1cHBvcnRlZCByZWdpb25zIGJ5IHRoZSBuZXR3b3JrLgogICAgICB0eXBlOiBvYmplY3QKICAgICAgcHJvcGVydGllczoKICAgICAgICBkaW1lbnNpb25zOgogICAgICAgICAgZGVzY3JpcHRpb246ICdUaGUgbnVtYmVyIG9mIGRpbWVuc2lvbnMgdGhhdCBhcmUgdXNlZCB0byBkZXNjcmliZSBhbnkgcG9pbnQgaW5zaWRlIHRoYXQgcmVnaW9uLiBUaGUgbW9zdCBjb21tb24gZGltZW5zaW9uYWxpdHkgb2YgYSByZWdpb24gaXMgMiwgdGhhdCByZXByZXNlbnRzIGFuIGFyZWEgb24gYSBtYXAuIFRoZXJlIGFyZSByZWdpb25zIG9uIHRoZSBtYXAgdGhhdCBjYW4gYmUgYXBwcm94aW1hdGVkIHRvIG9uZS1kaW1lbnNpb25hbCByZWdpb25zIGxpa2Ugcm9hZHMsIHJhaWx3YXkgbGluZXMsIG9yIHNoaXBwaW5nIGxpbmVzLiAzIGRpbWVuc2lvbmFsIHJlZ2lvbnMgYXJlIHJhcmVyLCBidXQgYXJlIGdhaW5pbmcgcG9wdWxhcml0eSBhcyBmbHlpbmcgZHJvbmVzIGFyZSBiZWluZyBhZG9wdGVkIGZvciB2YXJpb3VzIGZ1bGZpbGxtZW50IHNlcnZpY2VzLicKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZW51bToKICAgICAgICAgICAgLSAnMScKICAgICAgICAgICAgLSAnMicKICAgICAgICAgICAgLSAnMycKICAgICAgICB0eXBlOgogICAgICAgICAgZGVzY3JpcHRpb246ICdUaGUgdHlwZSBvZiByZWdpb24uIFRoaXMgaXMgdXNlZCB0byBzcGVjaWZ5IHRoZSBncmFudWxhcml0eSBvZiB0aGUgcmVnaW9uIHJlcHJlc2VudGVkIGJ5IHRoaXMgb2JqZWN0LiBWYXJpb3VzIGV4YW1wbGVzIG9mIHR3by1kaW1lbnNpb25hbCByZWdpb24gdHlwZXMgYXJlIGNpdHksIGNvdW50cnksIHN0YXRlLCBkaXN0cmljdCwgYW5kIHNvIG9uLiBUaGUgbmV0d29yayBwb2xpY3kgc2hvdWxkIGNvbnRhaW4gYSBsaXN0IG9mIGFsbCBwb3NzaWJsZSByZWdpb24gdHlwZXMgc3VwcG9ydGVkIGJ5IHRoZSBuZXR3b3JrLicKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIG5hbWU6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGRlc2NyaXB0aW9uOiBOYW1lIG9mIHRoZSByZWdpb24gYXMgc3BlY2lmaWVkIG9uIHRoZSBtYXAgd2hlcmUgdGhhdCByZWdpb24gZXhpc3RzLgogICAgICAgIGNvZGU6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGRlc2NyaXB0aW9uOiBBIHN0YW5kYXJkIGNvZGUgcmVwcmVzZW50aW5nIHRoZSByZWdpb24uIFRoaXMgc2hvdWxkIGJlIGludGVycHJldGVkIGluIHRoZSBzYW1lIHdheSBieSBhbGwgbmV0d29yayBwYXJ0aWNpcGFudHMuCiAgICAgICAgYm91bmRhcnk6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBib3VuZGFyeSBvZiB0aGUgcmVnaW9uLiBPbmUtZGltZW5zaW9uYWwgcmVnaW9ucyBhcmUgcmVwcmVzZW50ZWQgYnkgcG9seWxpbmVzLiBUd28tZGltZW5zaW9uYWwgcmVnaW9ucyBhcmUgcmVwcmVzZW50ZWQgYnkgcG9seWdvbnMsIGFuZCB0aHJlZS1kaW1lbnNpb25hbCByZWdpb25zIGNhbiByZXByZXNlbnRlZCBieSBwb2x5aGVkcmEuJwogICAgICAgIG1hcF91cmw6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgdXJsIHRvIHRoZSBtYXAgb2YgdGhlIHJlZ2lvbi4gVGhpcyBjYW4gYmUgYSBnbG9iYWxseSByZWNvZ25pemVkIG1hcCBvciB0aGUgb25lIHNwZWNpZmllZCBieSB0aGUgbmV0d29yayBwb2xpY3kuCiAgICBSZXBsYWNlbWVudFRlcm06CiAgICAgIGRlc2NyaXB0aW9uOiBUaGUgcmVwbGFjZW1lbnQgcG9saWN5IG9mIGFuIGl0ZW0gb3IgYW4gb3JkZXIKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgZnVsZmlsbG1lbnRfc3RhdGU6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIHN0YXRlIG9mIGZ1bGZpbGxtZW50IGR1cmluZyB3aGljaCB0aGlzIHRlcm0gaXMgYXBwbGljYWJsZS4KICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9TdGF0ZScKICAgICAgICByZXBsYWNlX3dpdGhpbjoKICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQXBwbGljYWJsZSBvbmx5IGZvciBidXllciBtYW5hZ2VkIHJldHVybnMgd2hlcmUgdGhlIGJ1eWVyIGhhcyB0byByZXBsYWNlIHRoZSBpdGVtIGJlZm9yZSBhIGNlcnRhaW4gZGF0ZS10aW1lLCBmYWlsaW5nIHdoaWNoIHRoZXkgd2lsbCBub3QgYmUgZWxpZ2libGUgZm9yIHJlcGxhY2VtZW50JwogICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgIC0gJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1RpbWUnCiAgICAgICAgZXh0ZXJuYWxfcmVmOgogICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL01lZGlhRmlsZScKICAgIFJldHVyblRlcm06CiAgICAgIGRlc2NyaXB0aW9uOiBEZXNjcmliZXMgdGhlIHJldHVybiBwb2xpY3kgb2YgYW4gaXRlbSBvciBhbiBvcmRlcgogICAgICB0eXBlOiBvYmplY3QKICAgICAgcHJvcGVydGllczoKICAgICAgICBmdWxmaWxsbWVudF9zdGF0ZToKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgc3RhdGUgb2YgZnVsZmlsbG1lbnQgZHVyaW5nIHdoaWNoIHRoaXMgdGVybSBJRVRGJydzIGFwcGxpY2FibGUuCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvU3RhdGUnCiAgICAgICAgcmV0dXJuX2VsaWdpYmxlOgogICAgICAgICAgZGVzY3JpcHRpb246IEluZGljYXRlcyB3aGV0aGVyIHRoZSBpdGVtIGlzIGVsaWdpYmxlIGZvciByZXR1cm4KICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICByZXR1cm5fdGltZToKICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQXBwbGljYWJsZSBvbmx5IGZvciBidXllciBtYW5hZ2VkIHJldHVybnMgd2hlcmUgdGhlIGJ1eWVyIGhhcyB0byByZXR1cm4gdGhlIGl0ZW0gdG8gdGhlIG9yaWdpbiBiZWZvcmUgYSBjZXJ0YWluIGRhdGUtdGltZSwgZmFpbGluZyB3aGljaCB0aGV5IHdpbGwgbm90IGJlIGVsaWdpYmxlIGZvciByZWZ1bmQuJwogICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgIC0gJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1RpbWUnCiAgICAgICAgcmV0dXJuX2xvY2F0aW9uOgogICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBsb2NhdGlvbiB3aGVyZSB0aGUgaXRlbSBvciBvcmRlciBtdXN0IC8gd2lsbCBiZSByZXR1cm5lZCB0bwogICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgIC0gJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0xvY2F0aW9uJwogICAgICAgIGZ1bGZpbGxtZW50X21hbmFnZWRfYnk6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIGVudGl0eSB0aGF0IHdpbGwgcGVyZm9ybSB0aGUgcmV0dXJuCiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGVudW06CiAgICAgICAgICAgIC0gQ09OU1VNRVIKICAgICAgICAgICAgLSBQUk9WSURFUgogICAgU2NhbGFyOgogICAgICBkZXNjcmlwdGlvbjogRGVzY3JpYmVzIGEgc2NhbGFyCiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIHR5cGU6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGVudW06CiAgICAgICAgICAgIC0gQ09OU1RBTlQKICAgICAgICAgICAgLSBWQVJJQUJMRQogICAgICAgIHZhbHVlOgogICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0RlY2ltYWxWYWx1ZScKICAgICAgICBlc3RpbWF0ZWRfdmFsdWU6CiAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvRGVjaW1hbFZhbHVlJwogICAgICAgIGNvbXB1dGVkX3ZhbHVlOgogICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0RlY2ltYWxWYWx1ZScKICAgICAgICByYW5nZToKICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgbWluOgogICAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9EZWNpbWFsVmFsdWUnCiAgICAgICAgICAgIG1heDoKICAgICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvRGVjaW1hbFZhbHVlJwogICAgICAgIHVuaXQ6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgIFNjaGVkdWxlOgogICAgICBkZXNjcmlwdGlvbjogJ0Rlc2NyaWJlcyBzY2hlZHVsZSBhcyBhIHJlcGVhdGluZyB0aW1lIHBlcmlvZCB1c2VkIHRvIGRlc2NyaWJlIGEgcmVndWxhcmx5IHJlY3VycmluZyBldmVudC4gQXQgYSBtaW5pbXVtIGEgc2NoZWR1bGUgd2lsbCBzcGVjaWZ5IGZyZXF1ZW5jeSB3aGljaCBkZXNjcmliZXMgdGhlIGludGVydmFsIGJldHdlZW4gb2NjdXJyZW5jZXMgb2YgdGhlIGV2ZW50LiBBZGRpdGlvbmFsIGluZm9ybWF0aW9uIGNhbiBiZSBwcm92aWRlZCB0byBzcGVjaWZ5IHRoZSBzY2hlZHVsZSBtb3JlIHByZWNpc2VseS4gVGhpcyBpbmNsdWRlcyBpZGVudGlmeWluZyB0aGUgdGltZXN0YW1wcyhzKSBvZiB3aGVuIHRoZSBldmVudCB3aWxsIHRha2UgcGxhY2UuIFNjaGVkdWxlcyBtYXkgYWxzbyBoYXZlIGhvbGlkYXlzIHRvIGV4Y2x1ZGUgYSBzcGVjaWZpYyBkYXkgZnJvbSB0aGUgc2NoZWR1bGUuPGJyPlRoaXMgaGFzIHByb3BlcnRpZXMgbGlrZSBmcmVxdWVuY3ksIGhvbGlkYXlzLCB0aW1lcycKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgZnJlcXVlbmN5OgogICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL0R1cmF0aW9uJwogICAgICAgIGhvbGlkYXlzOgogICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgZm9ybWF0OiBkYXRlLXRpbWUKICAgICAgICB0aW1lczoKICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgIGZvcm1hdDogZGF0ZS10aW1lCiAgICBTdGF0ZToKICAgICAgZGVzY3JpcHRpb246IEEgYm91bmRlZCBnZW9wb2xpdGljYWwgcmVnaW9uIG9mIGdvdmVybmFuY2UgaW5zaWRlIGEgY291bnRyeS4KICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgbmFtZToKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZGVzY3JpcHRpb246IE5hbWUgb2YgdGhlIHN0YXRlCiAgICAgICAgY29kZToKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZGVzY3JpcHRpb246IFN0YXRlIGNvZGUgYXMgcGVyIGNvdW50cnkgb3IgaW50ZXJuYXRpb25hbCBzdGFuZGFyZHMKICAgIFN0b3A6CiAgICAgIGRlc2NyaXB0aW9uOiBBIGxvZ2ljYWwgcG9pbnQgaW4gc3BhY2UgYW5kIHRpbWUgZHVyaW5nIHRoZSBmdWxmaWxsbWVudCBvZiBhbiBvcmRlci4KICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgaWQ6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICBwYXJlbnRfc3RvcF9pZDoKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIGxvY2F0aW9uOgogICAgICAgICAgZGVzY3JpcHRpb246IExvY2F0aW9uIG9mIHRoZSBzdG9wCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvTG9jYXRpb24nCiAgICAgICAgdHlwZToKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgdHlwZSBvZiBzdG9wLiBBbGxvd2VkIHZhbHVlcyBvZiB0aGlzIHByb3BlcnR5IGNhbiBiZSBkZWZpbmVkIGJ5IHRoZSBuZXR3b3JrIHBvbGljeS4KICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIHRpbWU6CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGltaW5ncyBhcHBsaWNhYmxlIGF0IHRoZSBzdG9wLgogICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgIC0gJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1RpbWUnCiAgICAgICAgaW5zdHJ1Y3Rpb25zOgogICAgICAgICAgZGVzY3JpcHRpb246IEluc3RydWN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgZm9sbG93ZWQgYXQgdGhlIHN0b3AKICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9EZXNjcmlwdG9yJwogICAgICAgIGNvbnRhY3Q6CiAgICAgICAgICBkZXNjcmlwdGlvbjogQ29udGFjdCBkZXRhaWxzIG9mIHRoZSBzdG9wCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvQ29udGFjdCcKICAgICAgICBwZXJzb246CiAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIGRldGFpbHMgb2YgdGhlIHBlcnNvbiBwcmVzZW50IGF0IHRoZSBzdG9wCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvUGVyc29uJwogICAgICAgIGF1dGhvcml6YXRpb246CiAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvQXV0aG9yaXphdGlvbicKICAgIFN1cHBvcnQ6CiAgICAgIGRlc2NyaXB0aW9uOiBEZXRhaWxzIG9mIGN1c3RvbWVyIHN1cHBvcnQKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgcmVmX2lkOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgY2FsbGJhY2tfcGhvbmU6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGZvcm1hdDogcGhvbmUKICAgICAgICBwaG9uZToKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZm9ybWF0OiBwaG9uZQogICAgICAgIGVtYWlsOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBmb3JtYXQ6IGVtYWlsCiAgICAgICAgdXJsOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBmb3JtYXQ6IHVyaQogICAgVGFnOgogICAgICBkZXNjcmlwdGlvbjogJ0Rlc2NyaWJlcyBhIHRhZy4gVGhpcyBpcyB1c2VkIHRvIGNvbnRhaW4gZXh0ZW5kZWQgbWV0YWRhdGEuIFRoaXMgb2JqZWN0IGNhbiBiZSBhZGRlZCBhcyBhIHByb3BlcnR5IHRvIGFueSBzY2hlbWEgdG8gZGVzY3JpYmUgZXh0ZW5kZWQgYXR0cmlidXRlcy4gRm9yIEJBUHMsIHRhZ3MgY2FuIGJlIHNlbnQgZHVyaW5nIHNlYXJjaCB0byBvcHRpbWl6ZSBhbmQgZmlsdGVyIHNlYXJjaCByZXN1bHRzLiBCUFBzIGNhbiB1c2UgdGFncyB0byBpbmRleCB0aGVpciBjYXRhbG9nIHRvIGFsbG93IGJldHRlciBzZWFyY2ggZnVuY3Rpb25hbGl0eS4gVGFncyBhcmUgc2VudCBieSB0aGUgQlBQIGFzIHBhcnQgb2YgdGhlIGNhdGFsb2cgcmVzcG9uc2UgaW4gdGhlIGBvbl9zZWFyY2hgIGNhbGxiYWNrLiBUYWdzIGFyZSBhbHNvIG1lYW50IGZvciBkaXNwbGF5IHB1cnBvc2VzLiBVcG9uIHJlY2VpdmluZyBhIHRhZywgQkFQcyBhcmUgbWVhbnQgdG8gcmVuZGVyIHRoZW0gYXMgbmFtZS12YWx1ZSBwYWlycy4gVGhpcyBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIHdoZW4gcmVuZGVyaW5nIHRhYnVsYXIgaW5mb3JtYXRpb24gYWJvdXQgYSBwcm9kdWN0IG9yIHNlcnZpY2UuJwogICAgICB0eXBlOiBvYmplY3QKICAgICAgcHJvcGVydGllczoKICAgICAgICBkZXNjcmlwdG9yOgogICAgICAgICAgZGVzY3JpcHRpb246ICdEZXNjcmlwdGlvbiBvZiB0aGUgVGFnLCBjYW4gYmUgdXNlZCB0byBzdG9yZSBkZXRhaWxlZCBpbmZvcm1hdGlvbi4nCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvRGVzY3JpcHRvcicKICAgICAgICB2YWx1ZToKICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgdmFsdWUgb2YgdGhlIHRhZy4gVGhpcyBzZXQgYnkgdGhlIEJQUCBhbmQgcmVuZGVyZWQgYXMtaXMgYnkgdGhlIEJBUC4KICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIGRpc3BsYXk6CiAgICAgICAgICBkZXNjcmlwdGlvbjogJ1RoaXMgdmFsdWUgaW5kaWNhdGVzIGlmIHRoZSB0YWcgaXMgaW50ZW5kZWQgZm9yIGRpc3BsYXkgcHVycG9zZXMuIElmIHNldCB0byBgdHJ1ZWAsIHRoZW4gdGhpcyB0YWcgbXVzdCBiZSBkaXNwbGF5ZWQuIElmIGl0IGlzIHNldCB0byBgZmFsc2VgLCBpdCBzaG91bGQgbm90IGJlIGRpc3BsYXllZC4gVGhpcyB2YWx1ZSBjYW4gb3ZlcnJpZGUgdGhlIGdyb3VwIGRpc3BsYXkgdmFsdWUuJwogICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgVGFnR3JvdXA6CiAgICAgIGRlc2NyaXB0aW9uOiAnQSBjb2xsZWN0aW9uIG9mIHRhZyBvYmplY3RzIHdpdGggZ3JvdXAgbGV2ZWwgYXR0cmlidXRlcy4gRm9yIGRldGFpbGVkIGRvY3VtZW50YXRpb24gb24gdGhlIFRhZ3MgYW5kIFRhZyBHcm91cHMgc2NoZW1hIGdvIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9iZWNrbi9wcm90b2NvbC1zcGVjaWZpY2F0aW9ucy9kaXNjdXNzaW9ucy8zMTYnCiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIGRpc3BsYXk6CiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0luZGljYXRlcyB0aGUgZGlzcGxheSBwcm9wZXJ0aWVzIG9mIHRoZSB0YWcgZ3JvdXAuIElmIGRpc3BsYXkgaXMgc2V0IHRvIGZhbHNlLCB0aGVuIHRoZSBncm91cCB3aWxsIG5vdCBiZSBkaXNwbGF5ZWQuIElmIGl0IGlzIHNldCB0byB0cnVlLCBpdCBzaG91bGQgYmUgZGlzcGxheWVkLiBIb3dldmVyLCBncm91cC1sZXZlbCBkaXNwbGF5IHByb3BlcnRpZXMgY2FuIGJlIG92ZXJyaWRlbiBieSBpbmRpdmlkdWFsIHRhZy1sZXZlbCBkaXNwbGF5IHByb3BlcnR5LiBBcyB0aGlzIHNjaGVtYSBpcyBwdXJlbHkgZm9yIGNhdGFsb2cgZGlzcGxheSBwdXJwb3NlcywgaXQgaXMgbm90IHJlY29tbWVuZGVkIHRvIHNlbmQgdGhpcyB2YWx1ZSBkdXJpbmcgc2VhcmNoLicKICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgIGRlZmF1bHQ6IHRydWUKICAgICAgICBkZXNjcmlwdG9yOgogICAgICAgICAgZGVzY3JpcHRpb246ICdEZXNjcmlwdGlvbiBvZiB0aGUgVGFnR3JvdXAsIGNhbiBiZSB1c2VkIHRvIHN0b3JlIGRldGFpbGVkIGluZm9ybWF0aW9uLicKICAgICAgICAgIGFsbE9mOgogICAgICAgICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9EZXNjcmlwdG9yJwogICAgICAgIGxpc3Q6CiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0FuIGFycmF5IG9mIFRhZyBvYmplY3RzIGxpc3RlZCB1bmRlciB0aGlzIGdyb3VwLiBUaGlzIHByb3BlcnR5IGNhbiBiZSBzZXQgYnkgQkFQcyBkdXJpbmcgc2VhcmNoIHRvIG5hcnJvdyB0aGUgYHNlYXJjaGAgYW5kIGFjaGlldmUgbW9yZSByZWxldmFudCByZXN1bHRzLiBXaGVuIHJlY2VpdmVkIGR1cmluZyBgb25fc2VhcmNoYCwgQkFQcyBtdXN0IHJlbmRlciB0aGlzIGxpc3QgdW5kZXIgdGhlIGhlYWRpbmcgZGVzY3JpYmVkIGJ5IHRoZSBgbmFtZWAgcHJvcGVydHkgb2YgdGhpcyBzY2hlbWEuJwogICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvVGFnJwogICAgVGltZToKICAgICAgZGVzY3JpcHRpb246ICdEZXNjcmliZXMgdGltZSBpbiBpdHMgdmFyaW91cyBmb3Jtcy4gSXQgY2FuIGJlIGEgc2luZ2xlIHBvaW50IGluIHRpbWU7IGR1cmF0aW9uOyBvciBhIHN0cnVjdHVyZWQgdGltZXRhYmxlIG9mIG9wZXJhdGlvbnM8YnI+VGhpcyBoYXMgcHJvcGVydGllcyBsaWtlIGxhYmVsLCB0aW1lIHN0YW1wLGR1cmF0aW9uLHJhbmdlLCBkYXlzLCBzY2hlZHVsZScKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgbGFiZWw6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICB0aW1lc3RhbXA6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGZvcm1hdDogZGF0ZS10aW1lCiAgICAgICAgZHVyYXRpb246CiAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvRHVyYXRpb24nCiAgICAgICAgcmFuZ2U6CiAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgIHN0YXJ0OgogICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIGZvcm1hdDogZGF0ZS10aW1lCiAgICAgICAgICAgIGVuZDoKICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBmb3JtYXQ6IGRhdGUtdGltZQogICAgICAgIGRheXM6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGRlc2NyaXB0aW9uOiBjb21tYSBzZXBhcmF0ZWQgdmFsdWVzIHJlcHJlc2VudGluZyBkYXlzIG9mIHRoZSB3ZWVrCiAgICAgICAgc2NoZWR1bGU6CiAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvU2NoZWR1bGUnCiAgICBUcmFja2luZzoKICAgICAgZGVzY3JpcHRpb246IENvbnRhaW5zIHRyYWNraW5nIGluZm9ybWF0aW9uIHRoYXQgY2FuIGJlIHVzZWQgYnkgdGhlIEJBUCB0byB0cmFjayB0aGUgZnVsZmlsbG1lbnQgb2YgYW4gb3JkZXIgaW4gcmVhbC10aW1lLiB3aGljaCBpcyB1c2VmdWwgZm9yIGtub3dpbmcgdGhlIGxvY2F0aW9uIG9mIHRpbWUgc2Vuc2l0aXZlIGRlbGl2ZXJpZXMuCiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIGlkOgogICAgICAgICAgZGVzY3JpcHRpb246IEEgdW5pcXVlIHRyYWNraW5nIHJlZmVyZW5jZSBudW1iZXIKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIHVybDoKICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQSBVUkwgdG8gdGhlIHRyYWNraW5nIGVuZHBvaW50LiBUaGlzIGNhbiBiZSBhIGxpbmsgdG8gYSB0cmFja2luZyB3ZWJwYWdlLCBhIHdlYmhvb2sgVVJMIGNyZWF0ZWQgYnkgdGhlIEJBUCB3aGVyZSBCUFAgY2FuIHB1c2ggdGhlIHRyYWNraW5nIGRhdGEsIG9yIGEgR0VUIHVybCBjcmVhZWQgYnkgdGhlIEJQUCB3aGljaCB0aGUgQkFQIGNhbiBwb2xsIHRvIGdldCB0aGUgdHJhY2tpbmcgZGF0YS4gSXQgY2FuIGFsc28gYmUgYSB3ZWJzb2NrZXQgVVJMIHdoZXJlIHRoZSBCUFAgY2FuIHB1c2ggcmVhbC10aW1lIHRyYWNraW5nIGRhdGEuJwogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBmb3JtYXQ6IHVyaQogICAgICAgIGxvY2F0aW9uOgogICAgICAgICAgZGVzY3JpcHRpb246ICdJbiBjYXNlIHRoZXJlIGlzIG5vIHJlYWwtdGltZSB0cmFja2luZyBlbmRwb2ludCBhdmFpbGFibGUsIHRoaXMgZmllbGQgd2lsbCBjb250YWluIHRoZSBsYXRlc3QgbG9jYXRpb24gb2YgdGhlIGVudGl0eSBiZWluZyB0cmFja2VkLiBUaGUgQlBQIHdpbGwgdXBkYXRlIHRoaXMgdmFsdWUgZXZlcnl0aW1lIHRoZSBCQVAgY2FsbHMgdGhlIHRyYWNrIEFQSS4nCiAgICAgICAgICBhbGxPZjoKICAgICAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvTG9jYXRpb24nCiAgICAgICAgc3RhdHVzOgogICAgICAgICAgZGVzY3JpcHRpb246ICdUaGlzIHZhbHVlIGluZGljYXRlcyBpZiB0aGUgdHJhY2tpbmcgaXMgY3VycmVudGx5IGFjdGl2ZSBvciBub3QuIElmIHRoaXMgdmFsdWUgaXMgYGFjdGl2ZWAsIHRoZW4gdGhlIEJBUCBjYW4gYmVnaW4gdHJhY2tpbmcgdGhlIG9yZGVyLiBJZiB0aGlzIHZhbHVlIGlzIGBpbmFjdGl2ZWAsIHRoZSB0cmFja2luZyBVUkwgaXMgY29uc2lkZXJlZCB0byBiZSBleHBpcmVkIGFuZCB0aGUgQkFQIHNob3VsZCBzdG9wIHRyYWNraW5nIHRoZSBvcmRlci4nCiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGVudW06CiAgICAgICAgICAgIC0gYWN0aXZlCiAgICAgICAgICAgIC0gaW5hY3RpdmUKICAgIFZlaGljbGU6CiAgICAgIGRlc2NyaXB0aW9uOiAnRGVzY3JpYmVzIGEgdmVoaWNsZSBpcyBhIGRldmljZSB0aGF0IGlzIGRlc2lnbmVkIG9yIHVzZWQgdG8gdHJhbnNwb3J0IHBlb3BsZSBvciBjYXJnbyBvdmVyIGxhbmQsIHdhdGVyLCBhaXIsIG9yIHRocm91Z2ggc3BhY2UuPGJyPlRoaXMgaGFzIHByb3BlcnRpZXMgbGlrZSBjYXRlZ29yeSwgY2FwYWNpdHksIG1ha2UsIG1vZGVsLCBzaXplLHZhcmlhbnQsY29sb3IsZW5lcmd5X3R5cGUscmVnaXN0cmF0aW9uJwogICAgICB0eXBlOiBvYmplY3QKICAgICAgcHJvcGVydGllczoKICAgICAgICBjYXRlZ29yeToKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIGNhcGFjaXR5OgogICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgIG1ha2U6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICBtb2RlbDoKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIHNpemU6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICB2YXJpYW50OgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgY29sb3I6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICBlbmVyZ3lfdHlwZToKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIHJlZ2lzdHJhdGlvbjoKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIHdoZWVsc19jb3VudDoKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIGNhcmdvX3ZvbHVtbmU6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICB3aGVlbGNoYWlyX2FjY2VzczoKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIGNvZGU6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICBlbWlzc2lvbl9zdGFuZGFyZDoKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgWElucHV0OgogICAgICBkZXNjcmlwdGlvbjogJ0NvbnRhaW5zIGFueSBhZGRpdGlvbmFsIG9yIGV4dGVuZGVkIGlucHV0cyByZXF1aXJlZCB0byBjb25maXJtIGFuIG9yZGVyLiBUaGlzIGlzIHR5cGljYWxseSBhIEZvcm0gSW5wdXQuIFNvbWV0aW1lcywgc2VsZWN0aW9uIG9mIGNhdGFsb2cgZWxlbWVudHMgaXMgbm90IGVub3VnaCBmb3IgdGhlIEJQUCB0byBjb25maXJtIGFuIG9yZGVyLiBGb3IgZXhhbXBsZSwgdG8gY29uZmlybSBhIGZsaWdodCB0aWNrZXQsIHRoZSBhaXJsaW5lIHJlcXVpcmVzIGRldGFpbHMgb2YgdGhlIHBhc3NlbmdlcnMgYWxvbmcgd2l0aCBpbmZvcm1hdGlvbiBvbiBiYWdnYWdlLCBpZGVudGl0eSwgaW4gYWRkaXRpb24gdG8gdGhlIGNsYXNzIG9mIHRpY2tldC4gU2ltaWxhcmx5LCBhIGxvZ2lzdGljcyBjb21wYW55IG1heSByZXF1aXJlIGRldGFpbHMgb24gdGhlIG5hdHVyZSBvZiBzaGlwbWVudCBpbiBvcmRlciB0byBjb25maXJtIHRoZSBzaGlwcGluZy4gQSByZWNydWl0aW5nIGZpcm0gbWF5IHJlcXVpcmUgYWRkaXRpb25hbCBkZXRhaWxzIG9uIHRoZSBhcHBsaWNhbnQgaW4gb3JkZXIgdG8gY29uZmlybSBhIGpvYiBhcHBsaWNhdGlvbi4gRm9yIGFsbCBzdWNoIHB1cnBvc2VzLCB0aGUgQlBQIGNhbiBjaG9vc2UgdG8gc2VuZCB0aGlzIG9iamVjdCBhdHRhY2hlZCB0byBhbnkgb2JqZWN0IGluIHRoZSBjYXRhbG9nIHRoYXQgaXMgcmVxdWlyZWQgdG8gYmUgc2VudCB3aGlsZSBwbGFjaW5nIHRoZSBvcmRlci4gVGhpcyBvYmplY3QgY2FuIHR5cGljYWxseSBiZSBzZW50IGF0IGFuIGl0ZW0gbGV2ZWwgb3IgYXQgdGhlIG9yZGVyIGxldmVsLiBUaGUgaXRlbSBsZXZlbCBYSW5wdXQgd2lsbCBvdmVycmlkZSB0aGUgT3JkZXIgbGV2ZWwgWElucHV0IGFzIGl0IGluZGljYXRlcyBhIHNwZWNpYWwgcmVxdWlyZW1lbnQgb2YgaW5mb3JtYXRpb24gZm9yIHRoYXQgcGFydGljdWxhciBpdGVtLiBIZW5jZSB0aGUgQkFQIG11c3QgcmVuZGVyIGEgc2VwYXJhdGUgZm9ybSBmb3IgdGhlIEl0ZW0gYW5kIGFub3RoZXIgZm9ybSBhdCB0aGUgT3JkZXIgbGV2ZWwgYmVmb3JlIGNvbmZpcm1hdGlvbi4nCiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIGZvcm06CiAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvRm9ybScKICAgICAgICByZXF1aXJlZDoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgZm9ybSBkYXRhIGlzIG1hbmRhdG9yaWx5IHJlcXVpcmVkIGJ5IHRoZSBCUFAgdG8gY29uZmlybSB0aGUgb3JkZXIuCiAgICAgICAgICB0eXBlOiBib29sZWFuCg=="

}
